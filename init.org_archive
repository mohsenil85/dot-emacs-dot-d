#    -*- mode: org -*-


Archived entries from file /Users/logan.k.mohseni/.emacs.d/init.org


* ac mode
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
					  ;      (use-package auto-complete
					  ;        :ensure
					  ;        :config
					  ;        (progn
					  ;          (require 'auto-complete-config)
					  ;          (add-to-list 'ac-dictionary-directories "~/.emacs.d/dict/")
					  ;          (ac-config-default)
					  ;          (ac-set-trigger-key "TAB")
					  ;          (ac-set-trigger-key "<tab>")
					  ; ))
#+END_SRC
   
* browse with eww
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  ;; (setq browse-url-browser-function 'eww-browse-url)
#+END_SRC

* cpp
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  ;;from http://cachestocaches.com/2015/8/c-completion-emacs/
					  ; (use-package irony
					  ;   :ensure t
					  ;   :defer t
					  ;   :init
					  ;   (add-hook 'c++-mode-hook 'irony-mode)
					  ;   (add-hook 'c-mode-hook 'irony-mode)
					  ;   (add-hook 'objc-mode-hook 'irony-mode)
					  ;   :config
					  ;   ;; replace the `completion-at-point' and `complete-symbol' bindings in
					  ;   ;; irony-mode's buffers by irony-mode's function
					  ;   (defun my-irony-mode-hook ()
					  ;     (define-key irony-mode-map [remap completion-at-point]
					  ;       'irony-completion-at-point-async)
					  ;     (define-key irony-mode-map [remap complete-symbol]
					  ;       'irony-completion-at-point-async))
					  ;   (add-hook 'irony-mode-hook 'my-irony-mode-hook)
					  ;   (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
					  ;   )

					  ; ;; == company-mode ==
					  ; (use-package company
					  ;   :ensure t
					  ;   :defer t
					  ;   :init (add-hook 'after-init-hook 'global-company-mode)
					  ;   :config
					  ;   (use-package company-irony :ensure t :defer t)
					  ;   (setq company-idle-delay              nil
					  ; 	company-minimum-prefix-length   2
					  ; 	company-show-numbers            t
					  ; 	company-tooltip-limit           20
					  ; 	company-dabbrev-downcase        nil
					  ; 	company-backends                '((company-irony company-gtags))
					  ; 	)
					  ;   :bind ("C-;" . company-complete-common)
					  ;   )

#+END_SRC
   
* deft org
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
					  ;  (use-package deft 
					  ;    :ensure t
					  ;    :config (progn
					  ;              (setq
					  ;               deft-extension "org"
					  ;               deft-directory "~/org/"
					  ;               deft-text-mode 'org-mode)
					  ;              (global-set-key (kbd "H-d") 'deft)))
#+END_SRC

* dumb-jump
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:37
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: packages
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  ;;re-write using M-.
  ;; (use-package dumb-jump
  ;; :ensure t 
  ;; :defer t 
  ;;   :bind (("M-g o" . dumb-jump-go-other-window)
  ;; 	 ("M-g j" . dumb-jump-go)
  ;; 	 ("M-g x" . dumb-jump-go-prefer-external)
  ;; 	 ("M-g z" . dumb-jump-go-prefer-external-other-window))
  ;;   :config (setq dumb-jump-selector 'helm)
  ;;   )

#+END_SRC

* el-get
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp
  ;;    (use-package el-get :ensure t
  ;;    :config

  ;;  (require 'el-get)
  ;; (add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
  ;; (el-get 'sync)
  ;; )

#+END_SRC

#+RESULTS:
: t

* elfeed
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:37
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: packages
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package elfeed
    :ensure t
    ;;:defer t
    :commands (elfeed-search-mode elfeed-show-mode)
    :init (progn
  	  ;; (use-package elfeed-goodies :ensure t)
  	  (use-package elfeed-org :ensure t))
    :config
    (progn
      (require 'elfeed-goodies)
      (elfeed-goodies/setup)
      (setq 
       elfeed-goodies/powerline-default-separator nil
       elfeed-goodies/entry-pane-position 'bottom)

      (setq elfeed-db-directory "~/.emacs.d/elfeed")
      (require 'elfeed-org)
      (elfeed-org)
      (setq rmh-elfeed-org-files (list "~/Dropbox/elfeed.org")))
      )



#+END_SRC

* evil-evilified-state
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  ;;   (use-package evil-evilified-state
  ;;   :load-path "~/Projects/elisp/evil-evilified-state/")

#+END_SRC

* evil-rsi
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  ;;;      (use-package evil-rsi 
  ;;;	 :diminish ""
  ;;;	 :ensure t 
  ;;;	 :defer t 
  ;;;	 :config (evil-rsi-mode 1) )  
#+END_SRC
    
* exwm
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  ;;  (use-package exwm :ensure t :defer t 
  ;;    :config (exwm-config-default))
#+END_SRC

* flx
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
					  ;(use-package flx :ensure t)

#+END_SRC

* helm
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:32
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
taken from http://tuhdo.github.io/helm-intro.html
things i need to remember
- C-h f, which runs describe-function
- C-h v, which runs describe-variable
- C-h w, which runs where-is
** helm proper
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package helm
    :ensure t
    :diminish """~/.emacs/data/helm-history")


  (setq helm-M-x-fuzzy-match t)
  (setq helm-recentf-fuzzy-match t)
  (setq helm-mode-fuzzy-match t)
  (setq helm-buffers-fuzzy-matching t)
  (setq helm-ff-auto-update-initial-value t) ;; use c-backspact
  (setq helm-move-to-line-cycle-in-source t)


  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
  ;;(define-key shell-mode-map (kbd "C-c C-l") 'helm-comint-input-ring)
  (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history) 

  (autoload 'helm-descbinds      "helm-descbinds" t)
  (autoload 'helm-eshell-history "helm-eshell"    t)
  (autoload 'helm-esh-pcomplete  "helm-eshell"    t)

  (setq helm-autoresize-mode t)
  (setq helm-split-window-in-side-p t)
  (setq helm-ff-file-name-history-use-recentf t)
  (setq helm-autoresize-mode t)

  (global-set-key (kbd "C-c h g") 'helm-google-suggest)
  (global-set-key (kbd "C-c h r") 'helm-register)
  (helm-mode 1))
  )

  (use-package helm-descbinds :ensure t :defer t :config
    (progn
      (require 'helm-descbinds)
      (helm-descbinds-mode)
      )
    )

  (use-package helm-ag :ensure t :defer t)
  (use-package helm-ack :ensure t :defer t)
#+END_SRC
    
** helm-gtags 
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package helm-gtags
    :ensure t
    :defer t
    :config
    (progn
  	;;; Enable helm-gtags-mode
      (add-hook 'c-mode-hook 'helm-gtags-mode)
      (add-hook 'c++-mode-hook 'helm-gtags-mode)
      (add-hook 'asm-mode-hook 'helm-gtags-mode)
      (add-hook 'java-mode-hook 'helm-gtags-mode)

      ;; customize
      (setq
       helm-gtags-path-style 'relative)
      (setq  
       helm-gtags-auto-update t) 

      (setq helm-gtags-prefix-key "C-t")
  					;      (helm-gtags-suggested-key-mapping t)
      ;; key bindings
      (eval-after-load "helm-gtags"
        '(progn
  	 (define-key helm-gtags-mode-map (kbd "M-t") 'helm-gtags-find-tag)
  	 (define-key helm-gtags-mode-map (kbd "M-r") 'helm-gtags-find-rtag)
  	 (define-key helm-gtags-mode-map (kbd "M-s") 'helm-gtags-find-symbol)
  	 (define-key helm-gtags-mode-map (kbd "M-g M-p") 'helm-gtags-parse-file)
  	 (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
  	 (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
  	 (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack))))


    )

#+END_SRC
    
* helm-swoop
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  ;;      (use-package helm-swoop 
  ;;        :ensure
  ;;        :config
  ;;        (progn
  ;;          (global-set-key (kbd "M-i") 'helm-swoop)
  ;;          (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
  ;;          (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
  ;;          (global-set-key (kbd "C-x M-i") 'helm-multi-swoop-all)
  ;;
  ;;          ;; When doing isearch, hand the word over to helm-swoop
  ;;          (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
  ;;          ;; From helm-swoop to helm-multi-swoop-all
  ;;          (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
  ;;          ;; When doing evil-search, hand the word over to helm-swoop
  ;;          ;; (define-key evil-motion-state-map (kbd "M-i") 'helm-swoop-from-evil-search)
  ;;
  ;;          ;; Instead of helm-multi-swoop-all, you can also use helm-multi-swoop-current-mode
  ;;          (define-key helm-swoop-map (kbd "M-m") 'helm-multi-swoop-current-mode-from-helm-swoop)
  ;;
  ;;          ;; Move up and down like isearch
  ;;          (define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
  ;;          (define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
  ;;          (define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
  ;;          (define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line)
  ;;
  ;;          ;; Save buffer when helm-multi-swoop-edit complete
  ;;          (setq helm-multi-swoop-edit-save t)
  ;;
  ;;          ;; If this value is t, split window inside the current window
  ;;          (setq helm-swoop-split-with-multiple-windows nil)
  ;;
  ;;          ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
  ;;          (setq helm-swoop-split-direction 'split-window-vertically)
  ;;
  ;;          ;; If nil, you can slightly boost invoke speed in exchange for text color
  ;;          (setq helm-swoop-speed-or-color nil)
  ;;
  ;;          ;; ;; Go to the opposite side of line from the end or beginning of line
  ;;          (setq helm-swoop-move-to-line-cycle t)
  ;;
  ;;          ;; Optional face for line numbers
  ;;          ;; Face name is `helm-swoop-line-number-face`
  ;;          (setq helm-swoop-use-line-number-face t)))
#+END_SRC

* inital buffer
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
					  ;(setq initial-buffer-choice "~/org")
					  ;(setq initial-buffer-choice "~/org/organizer.org")

					  ;(setq initial-buffer-choice  (bookmark-bmenu-list))

					  ;  (org-agenda-list)
					  ;  (delete-other-windows)
					  ;  (org-agenda-day-view)
#+END_SRC
   
* java
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  ;; (use-package meghanada 
  ;;   :ensure t
  ;;   :defer t
  ;;   :config 
  ;;   (progn
  ;;     (add-hook 'java-mode-hook
  ;; 		(lambda ()
  ;; 		  ;; meghanada-mode on
  ;; 		  (meghanada-mode t)
  ;; 		  (add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))
  ;;     )
  ;;   )
  ;; (use-package emacs-eclim :ensure
  ;;   :config
  ;;   (progn
  ;;     (require 'eclim)
  ;;     (global-eclim-mode)
  ;;     (setf eclim-eclipse-dirs
  ;;           '("/Users/lmohseni/java-neon/Eclipse.app/Contents/Eclipse"))
  ;;     (setf eclim-executable 
  ;;           '("/Users/lmohseni/java-neon/Eclipse.app/Contents/Eclipse/eclim"))
  ;; (setq help-at-pt-display-when-idle t)
  ;; (setq help-at-pt-timer-delay 0.1)
  ;; (help-at-pt-set-timer)
  ;; ;; regular auto-complete initialization
  ;; (require 'auto-complete-config)
  ;; (ac-config-default)

  ;; ;; add the emacs-eclim source
  ;; (require 'ac-emacs-eclim-source)
  ;; (ac-emacs-eclim-config)
  ;;     ))

#+END_SRC
   
* javascript
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
   
#+BEGIN_SRC emacs-lisp :results output silent
  (add-to-list 'auto-mode-alist '("\\.json" . js-mode))
  (autoload 'js2-mode "js2" nil t)
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
  					  ;(use-package ac-js2 :ensure)

  (defun my-js-mode-stuff ()
    (setq js2-highlight-level 3)
    (define-key js-mode-map "{" 'paredit-open-curly)
    (define-key js-mode-map "}" 'paredit-close-curly-and-newline)
    )
  (use-package js2-mode :ensure t :defer t :config (my-js-mode-stuff))

#+END_SRC
   
* llm
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:40
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: packages
:ARCHIVE_CATEGORY: emacs-init
:END:

#+BEGIN_SRC emacs-lisp :results output silent
  ;;
  ;; NOTE: USE `lsp_mode` not `eglot`.
  ;;
  ;;       `eglot` is only useful if you want to manage `python lsp_server.py`
  ;;       yourself for debugging purposes
  ;;

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; EGLOT CONFIGURATION
  ;;
  ;;   add to init.el
  ;;
  ;; NOTE:
  ;;
  ;; `eglot` allows you to separately run the server yourself, which can be useful
  ;; for debugging. `lsp-mode` requires that it launches the process, and then
  ;; your logs are buried in an emacs buffer somewhere.  If you want to run it
  ;; yourself:
  ;;
  ;;     python lsp_server.py
  ;;
  ;; And then just make sure the `lsp_port` you run on is the same one mentioned
  ;; at the bottom of this config.


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; LLM Mode
  ;;
  ;; This is only useful at the current stage of development, and should be
  ;; removed once `lsp-mode` is integrated and allows concurrent LSPs per each
  ;; buffer.

  (define-derived-mode llm-mode fundamental-mode "llm"
    "A mode for llm files."
    (setq-local comment-start "#")
    (setq-local comment-start-skip "#+\\s-*"))

  (defvar llm-mode-map
    (let ((map (make-sparse-keymap)))
      map)
    "Keymap for `llm-mode'.")

  (defvar llm-mode-hook nil)

  (provide 'llm-mode)

  (add-to-list 'auto-mode-alist '("\\.llm\\'" . llm-mode))


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; LLM Mode (TODO REDUNDANT)

  (add-to-list 'load-path (expand-file-name "~/_/uniteai/"))

  (require 'llm-mode)

  (use-package llm-mode
    :straight nil
    :ensure nil
    :mode ("\\.llm\\'" . llm-mode)
    :hook (llm-mode . eglot-ensure))


  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; EGlot

  (use-package eglot
    :straight nil
    :ensure t
    :hook
    (eglot--managed-mode . company-mode)
    :init
    ;; Tell eglot not to ask if you're ok with the server modifying the document.
    (setq eglot-confirm-server-initiated-edits nil)
    :config
    (define-key eglot-mode-map (kbd "M-'") 'eglot-code-actions)
    )


  ;;;;;;;;;;

  ;; Global stopping
  (defun eglot-stop ()
    (interactive)
    (let* ((server (eglot--current-server-or-lose))
           (doc (eglot--TextDocumentIdentifier)))
      (eglot-execute-command server 'command.stop (vector doc))))

  ;; Example Counter
  (defun eglot-example-counter ()
    (interactive)
    (let* ((server (eglot--current-server-or-lose))
           (doc (eglot--TextDocumentIdentifier))
           (pos (eglot--pos-to-lsp-position (point))))
      (eglot-execute-command server 'command.exampleCounter (vector doc pos))))

  ;; Local LLM
  (defun eglot-local-llm ()
    (interactive)
    (unless mark-active
      (error "No region selected"))
    (let* ((server (eglot--current-server-or-lose))
           (doc (eglot--TextDocumentIdentifier))
           (range (list :start (eglot--pos-to-lsp-position (region-beginning))
                        :end (eglot--pos-to-lsp-position (region-end)))))
      (eglot-execute-command server 'command.localLlmStream (vector doc range))))

  ;; Transcription
  (defun eglot-transcribe ()
    (interactive)
    (let* ((server (eglot--current-server-or-lose))
           (doc (eglot--TextDocumentIdentifier))
           (pos (eglot--pos-to-lsp-position (point))))
      (eglot-execute-command server 'command.transcribe (vector doc pos))))

  ;; OpenAI
  (defun eglot-openai-gpt ()
    (interactive)
    (unless mark-active
      (error "No region selected"))
    (let* ((server (eglot--current-server-or-lose))
           (doc (eglot--TextDocumentIdentifier))
           (range (list :start (eglot--pos-to-lsp-position (region-beginning))
                        :end (eglot--pos-to-lsp-position (region-end)))))
      (eglot-execute-command server 'command.openaiAutocompleteStream (vector doc range "FROM_CONFIG_COMPLETION" "FROM_CONFIG"))))

  (defun eglot-openai-chatgpt ()
    (interactive)
    (unless mark-active
      (error "No region selected"))
    (let* ((server (eglot--current-server-or-lose))
           (doc (eglot--TextDocumentIdentifier))
           (range (list :start (eglot--pos-to-lsp-position (region-beginning))
                        :end (eglot--pos-to-lsp-position (region-end)))))
      (eglot-execute-command server 'command.openaiAutocompleteStream (vector doc range "FROM_CONFIG_CHAT" "FROM_CONFIG"))))

  (add-hook 'llm-mode-hook
            (lambda ()
              (define-key llm-mode-map (kbd "C-c l s") 'eglot-stop)

              (define-key llm-mode-map (kbd "C-c l e") 'eglot-example-counter)

              (define-key llm-mode-map (kbd "C-c l l") 'eglot-local-llm)

              (define-key llm-mode-map (kbd "C-c l v") 'eglot-transcribe)

              (define-key llm-mode-map (kbd "C-c l g") 'eglot-openai-gpt)
              (define-key llm-mode-map (kbd "C-c l c") 'eglot-openai-chatgpt)
              (eglot-ensure)))

  (require 'eglot)
  (add-to-list 'eglot-server-programs
               `(llm-mode . ("localhost" 5033)))

#+END_SRC

* local packages
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:

#+BEGIN_SRC emacs-lisp :results output silent
  ;;add the vendor directory to the load path
  ;;hopefully obsoleted by use of quelpa
  ;;	(let ((default-directory "~/.emacs.d/vendor/"))
  ;;  (normal-top-level-add-subdirs-to-load-path))
#+END_SRC

* LSP 
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:38
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: packages
:ARCHIVE_CATEGORY: emacs-init
:END:

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
  	 (typescript-mode . lsp)
  	 (javascript-mode . lsp)
  	 ;; if you want which-key integration
  	 (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  ;; optionally
  (use-package lsp-ui :commands lsp-ui-mode)
  ;; if you are ivy user
  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  ;;(use-package lsp-treemacs :commands lsp-treemacs-errors-list)

  ;; optionally if you want to use debugger
  ;;(use-package dap-mode :straight nil)
  ;;(use-package dap-typescript) to load the dap adapter for your language

  ;; optional if you want which-key integration
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

#+RESULTS:
: t

** 

* main global meta bindings
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:45
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: interface
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent

  (global-set-key (kbd "C-M-F") 'multi-occur)  
  (global-set-key (kbd "C-M-[") 'winner-undo)
  (global-set-key (kbd "C-M-]") 'winner-redo)
  (global-set-key (kbd "C-M-e") 'open-in-webstorm )
  (global-set-key (kbd "C-M-f") 'projectile-ag)  ;;search in file
  (global-set-key (kbd "C-M-g") 'magit-status)
  (global-set-key (kbd "C-M-n") 'evil-buffer-new)
  (global-set-key (kbd "C-M-o") 'projectile-switch-project)
  (global-set-key (kbd "C-M-p") 'package-install)
  (global-set-key (kbd "C-M-q") 'save-buffers-kill-emacs)
  (global-set-key (kbd "C-M-z") 'git-gutter:revert-hunk)
  (global-set-key (kbd "H-n") 'evil-force-normal-state)
  (global-set-key (kbd "M-?") 'which-key-show-major-mode)
  (global-set-key (kbd "M-B") 'bookmark-set)
  (global-set-key (kbd "M-D") 'dired-jump-other-window)
  (global-set-key (kbd "M-F") 'counsel-ag)  ;; search in project/directory
  (global-set-key (kbd "M-N") 'git-gutter:next-hunk)
  (global-set-key (kbd "M-O") 'counsel-find-file)  ;;open file
  (global-set-key (kbd "M-P") 'git-gutter:previous-hunk)
  (global-set-key (kbd "M-W") 'kill-other-buffer)
  (global-set-key (kbd "M-Z")  'undo-tree-redo)
  (global-set-key (kbd "M-[") 'previous-buffer)
  (global-set-key (kbd "M-]") 'next-buffer)
  (global-set-key (kbd "M-b") 'bookmark-bmenu-list) ;;buffers
  (global-set-key (kbd "M-d") 'dired-jump)
  (global-set-key (kbd "M-g") 'ivy-switch-buffer) ;;buffers "go"
  (global-set-key (kbd "M-i") 'counsel-info-lookup-symbol) ;;search info
  (global-set-key (kbd "M-m") 'counsel-mark-ring) ;;mark rings
  (global-set-key (kbd "M-n") 'next-error)
  (global-set-key (kbd "M-o") 'other-window)
  (global-set-key (kbd "M-p") 'previous-error)
  (global-set-key (kbd "M-r")  'revert-buffer)
  (global-set-key (kbd "M-s") 'save-all)
  (global-set-key (kbd "M-w") 'kill-this-buffer)
  (global-set-key (kbd "M-y") 'counsel-yank-pop) ;;kill ring browse
  (global-set-key (kbd "M-z")  'undo)	       ;
  (global-set-key (kbd "M-{") 'backward-global-mark)
  (global-set-key (kbd "M-}") 'forward-global-mark)
  (global-set-key (kbd "s-T") 'display-time)
  (global-set-key (kbd "s-a") 'org-agenda-list)
  (global-set-key (kbd "s-b") 'ibuffer)
  (global-set-key (kbd "s-c") 'cfw:open-org-calendar)
  (global-set-key (kbd "s-f")  'elfeed)
  (global-set-key (kbd "s-m") 'mu4e) ;;mark rings
  (global-set-key (kbd "s-p") 'package-list-packages-no-fetch)
  (global-set-key (kbd "s-q") 'svisual-fill-column-mode)
  (global-set-key (kbd "s-s")  'sort-lines)
  (global-set-key (kbd "s-t")  '(lambda()(interactive)(term "zsh")))
  (global-set-key (kbd "s-z") 'undo-tree-visualize)
#+END_SRC


* swiper ivy counsel et al
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-26 Sat 11:13
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: packages
:ARCHIVE_CATEGORY: init
:END:
   
#+BEGIN_SRC emacs-lisp :results output silent

  ;;taken from https://sam217pa.github.io/2016/09/13/from-helm-to-ivy/
  ;; (use-package avy :ensure t :commands (avy-goto-word-1))

  (use-package ivy 
    :ensure  t ;ivy-hydra 
    :diminish ivy-mode ; does not display ivy in the modeline
    :bind (:map ivy-mode-map  ; bind in the ivy buffer
  		("C-'" . ivy-avy)) ; C-' to ivy-avy
    :config
    (ivy-mode 1)        ; enable ivy globally at startup
  					  ;
    ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
    (setq ivy-use-virtual-buffers t)
    ;; number of result lines to display
    (setq ivy-height 10)
    ;; does not count candidates
    (setq ivy-count-format "")
    ;; no regexp by default
    (setq ivy-initial-inputs-alist nil)
    ;; configure regexp engine.
    (setq ivy-re-builders-alist
  	  ;; allow input not in order
  	  '((t   . ivy--regex-fuzzy)
  	    (t   . ivy--regex-ignore-order))))

  ;; (use-package ivy :demand
  ;;   :config
  ;;   (setq ivy-use-virtual-buffers t
  ;; 	ivy-count-format "%d/%d "))

  ;; (use-package counsel :ensure t )
  (use-package ivy-hydra :ensure t :defer t)
#+END_SRC
   
* mark mode
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  ;;;(transient-mark-mode t)
#+END_SRC

* Mode line defaults
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)
#+END_SRC

* mu4e based email stuff
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:33
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  ;; (add-to-list 'load-path  "~/Projects/elisp/mu4e-multi/" )
  ;;       (require 'mu4e-multi)
#+END_SRC
  
#+BEGIN_SRC emacs-lisp :results output silent
   (use-package mu4e  
     ;;:load-path mu-load-path
     :commands (make-mu4e-context)
     :init (progn

  	    (when (fboundp 'imagemagick-register-types)
  	      (imagemagick-register-types))
  	    )
     :config
     (progn
       (general-define-key
        :keymaps '(mu4e-view-mode-map mu4e-headers-mode-map)
        "SPC" 'evil-scroll-page-down
        "DEL" 'evil-scroll-page-up)
       )
     :bind ("C-c m" . mu4e)
     ))


#+END_SRC

* narrow-to-region
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
this is what i'm trying to learn.  
C-x n p to narrow and
C-x n w to widen to a page (delineated by ^L chars)
#+BEGIN_SRC emacs-lisp :results output silent
					  ;(put 'narrow-to-page 'disabled nil)
#+END_SRC 

* no-littering
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
					  ;  (use-package no-littering :ensure t )
#+END_SRC

* org-ac
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  ;;      (use-package org-ac
  ;;        :ensure
  ;;        :init
  ;;        (progn
  ;;          (require 'org-ac)
  ;;          ;; Make config suit for you. About the config item, eval the following sexp.
  ;;          ;; (customize-group "org-ac")
  ;;          (org-ac/config-default)
  ;;          ) )  
#+END_SRC

* org-brain
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:39
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: packages
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package org-brain :ensure t
    :init
    (setq org-brain-path "~/Dropbox/org-brain/")
    ;; For Evil users
    (with-eval-after-load 'evil
      (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
    :config
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/.emacs.d/org-id-locations")
    (push '("b" "Brain" plain (function org-brain-goto-end)
  	  "* %i%?" :empty-lines 1)
  	org-capture-templates)
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 16))
#+END_SRC

* package mode
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:41
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: functionaria
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp
  (eval-after-load "evil-mode"	'(progn
				     (add-to-list 'evil-normal-state-modes 'package-menu-mode)

				     ))

  (general-define-key
   :keymaps '(package-menu-mode-map )
   "SPC" 'evil-scroll-page-down
   "DEL" 'evil-scroll-page-up
   "I" 'package-menu-mark-install
   "X" 'package-menu-execute          	  
   "D" 'package-menu-mark-delete
   ;;"u" 'package-menu-mark-unmark
   "RET" 'package-menu-describe-package 
   "r" 'package-menu-refresh
   )

#+END_SRC

#+RESULTS:

* paradox --better package search
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
					  ;(use-package paradox :ensure t :defer t)
#+END_SRC
   
* paren stuff
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:43
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:

;; (use-package lispy
;;   :ensure t
;;   :init
;;   :config
;;   (add-hook 'lispy-mode-hook #'lispyville-mode)

;;      (add-hook 'eval-expression-minibuffer-setup-hook 'lispy-mode)
;;      (add-hook 'lisp-mode-hook             'lispy-mode)
;;      (add-hook 'slime-repl-mode-hook            'lispy-mode)
;;      (add-hook 'lisp-interaction-mode-hook 'lispy-mode)
;;      (add-hook 'scheme-mode-hook           'lispy-mode)
;;      (add-hook 'emacs-lisp-mode-hook 'lispy-mode)
;;      (add-hook 'clojure-mode-hook 'lispy-mode)
;;      (add-hook 'clojurescript-mode-hook 'lispy-mode)
;;      (add-hook 'clojurec-mode-hook 'lispy-mode)
;;      )

;; (use-package paredit
;;   :ensure t
;;   :init
;; ;;(unbind-key "C-'" paredit-mode-map)
;; ;;(unbind-key "C-," pareditorg-mode-map)
;;   :config 
;;   (add-hook 'eval-expression-minibuffer-setup-hook 'enable-paredit-mode)
;;   (add-hook 'lisp-mode-hook             'enable-paredit-mode)
;;   (add-hook 'slime-repl-mode-hook            'enable-paredit-mode)
;;   (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
;;   (add-hook 'scheme-mode-hook           'enable-paredit-mode)
;;   (add-hook 'emacs-lisp-mode-hook 'enable-paredit-mode)
;;   (add-hook 'clojure-mode-hook 'enable-paredit-mode)
;;   (add-hook 'clojurescript-mode-hook 'enable-paredit-mode)
;;   (add-hook 'clojurec-mode-hook 'enable-paredit-mode)


;;   (evil-define-key 'normal paredit-mode ")" 'paredit-forward-up)
;;   (evil-define-key 'normal paredit-mode "(" 'paredit-backward-up)
;;   (evil-define-key 'normal paredit-mode (kbd "C-0") 'paredit-backward-down)
;;   (evil-define-key 'normal paredit-mode (kbd "C-9") 'paredit-forward-down)



;;   )

* scroll modeline 
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package mlscroll
    :ensure t
    :config
    (setq mlscroll-shortfun-min-width 11) ;truncate which-func, for default mode-line-format's
    (mlscroll-mode 1))
#+END_SRC

* set inital directroy to home
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  ;;;(setq default-directory (getenv "HOME"))

#+END_SRC

* tex n friends
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:43
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  ;;(use-package tex :ensure auctex :defer t  :config (require 'tex) )

  ;;(add-hook 'LaTeX-mode-hook (lambda ()
  ;;  (push 
  ;;    '("Latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
  ;;      :help "Run Latexmk on file")
  ;;    TeX-command-list)))

#+END_SRC
   
* text-mode stuff
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent

  ;; (add-hook 'text-mode-hook 'flyspell-mode)

  ;;;	  (add-hook 'text-mode-hook #'abbrev-mode)




					  ;    ;(add-hook 'text-mode-hook 'writeroom-mode)
#+END_SRC
   
;;; (setq custom-file (make-temp-file "emacs-custom"))  

* typescript
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:42
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

  (use-package tide :ensure t :defer t :config
    ;; aligns annotation to the right hand side
    (setq company-tooltip-align-annotations t)

    ;; formats the buffer before saving
    (add-hook 'before-save-hook 'tide-format-before-save)
  
    (add-hook 'typescript-mode-hook #'setup-tide-mode)
    )   

#+END_SRC

* vimmish fold
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:43
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  ;; (use-package vimish-fold
  ;;   :ensure t
  ;;   :config
  ;;   (progn
  ;;     (evil-leader/set-key "ff" 'vimish-fold)
  ;;     (evil-leader/set-key "fd" 'vimish-fold-delete)
  ;;     ))
#+END_SRC

* yasnippet
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-23 Wed 15:43
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: deleted
:ARCHIVE_CATEGORY: emacs-init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  ;; (use-package yasnippet
  ;;   :ensure t
  ;;   :diminish ""
  ;;   :config
  ;;   (progn
  ;;   (yas-global-mode 1)
  ;;     (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets"))
  ;;     ))

  ;; (use-package common-lisp-snippets
  ;;   :ensure t
  ;;   :config (require 'common-lisp-snippets))
#+END_SRC


* powerline                                                 :ARCHIVE:ARCHIVE:
:PROPERTIES:
:ARCHIVE_TIME: 2023-08-31 Thu 12:45
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: packages
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
    (use-package powerline 
      :ensure
      :config (progn
                (require 'powerline)
                (powerline-center-evil-theme)
  ))
#+END_SRC
   

* visual line mode
:PROPERTIES:
:ARCHIVE_TIME: 2023-09-06 Wed 13:55
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: itself
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package visual-line
  :straight nil
  :diminish visual-line-mode
  )

#+END_SRC

* projectile
:PROPERTIES:
:ARCHIVE_TIME: 2023-09-06 Wed 20:21
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: packages
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package projectile
    :ensure t
    :diminish
    :config
      (projectile-global-mode)
      (setq projectile-completion-system 'default)
      (setq projectile-create-missing-test-files t)
      (setq projectile-switch-project-action 'projectile-dired)
      (setq projectile-sort-order 'recentf)
      (setq projectile-mode-line '(:eval (format " [%s]" (projectile-project-name))))
  
    ;; (use-package counsel-projectile
    ;;   :ensure t
    ;;   :config
    ;;   (add-hook 'after-init-hook 'counsel-projectile-mode))
    )
#+END_SRC
   

* modus theme* old color theme
:PROPERTIES:
:ARCHIVE_TIME: 2023-09-08 Fri 12:35
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  ;; (use-package gandalf-theme :ensure t)
  ;; (use-package mbo70s-theme :ensure t)
  ;; (use-package warm-night-theme  :ensure t )
  ;; (use-package twilight-bright-theme :ensure t )
  ;; (use-package standard-themes :ensure t )
  ;; (use-package alect-themes :ensure t)
  ;; (use-package yoshi-theme :ensure t)
  ;; (use-package slime-theme :ensure t)
  ;; (use-package basic-theme :ensure t)
  ;; (use-package minimal-theme :ensure t)
  ;; (use-package white-theme :ensure t)
  ;; (use-package paper-theme :ensure t )
  ;; (use-package django-theme :ensure t )
  ;; (use-package solarized-theme :ensure t)
  ;; (use-package minimal-theme :ensure t)


  (use-package humanoid-themes :ensure t)
  (use-package soft-morning-theme :ensure t )
  (use-package soft-charcoal-theme :ensure t )
  (use-package hydandata-light-theme :ensure t)

  (use-package standard-themes :ensure t )

  (defun load-dark ()
    (load-theme 'humanoid-dark t)
    (setq dark-light-state :dark ))

  (defun load-light ()
    (load-theme 'humanoid-light t)
    (setq dark-light-state :light ))

  ;; (defun load-light ()
  ;;   (load-theme 'hydandata-light t)
  ;;   (setq dark-light-state :light ))

  (defun reset-themes()
    (mapc #'disable-theme custom-enabled-themes))

  (defun toggle-dark-light-state ()
    (interactive)
    (reset-themes)
    (if (eq dark-light-state :dark)
        (load-light)
      (load-dark)))

  (defun init-themes ()
    (reset-themes)
    (load-light))

  (init-themes)


#+END_SRC


* dired
:PROPERTIES:
:ARCHIVE_TIME: 2023-09-28 Thu 09:57
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: packages
:ARCHIVE_CATEGORY: init
:END:
vinagresque
#+BEGIN_SRC emacs-lisp :results output silent

  (use-package dired
    :straight nil				;
    :bind (:map dired-mode-map 
  	      (("`" . dired-toggle-read-only)
  	       ("j" .  evil-next-line)
  	       ("k" . evil-previous-line)
  	       ( "-" .  dired-up-directory)
  	       ("~" . (lambda ()(interactive) (find-alternate-file "~/")))
  	       ("RET" . dired-find-file)
  	       ("C-<return>" . dired-find-file-other-window) 
  	       ("/" . evil-search-forward) 
  	       )
  	      )

    :init
    (add-to-list 'evil-emacs-state-modes 'dired-mode)
    :config
    (use-package dired+
      :straight (dired+ :fetcher url :url "https://www.emacswiki.org/emacs/download/dired+.el")
      :defer 1
      :init
      (setq diredp-hide-details-initially-flag t)
      (setq diredp-hide-details-propagate-flag t)
      :config
      (diredp-toggle-find-file-reuse-dir 1))

    )


  (eval-after-load "evil-mode"
    '(progn
       (add-to-list 'evil-emacs-state-modes 'dired-mode)
       ))

  (use-package dired-git-info
    :ensure t
    :bind (:map dired-mode-map
                (")" . dired-git-info-mode)))




#+END_SRC

* sentence navigation
:PROPERTIES:
:ARCHIVE_TIME: 2023-09-28 Thu 09:58
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: packages
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package sentence-navigation
    :ensure t
    :bind (:map evil-motion-state-map 
		((")" . sentence-nav-evil-forward)
		 ("(" . sentence-nav-evil-backward)
		 ("g(" . sentence-nav-evil-backward-end)
		 ("g)" . sentence-nav-evil-forward-end)))
    :config
    (progn
      (define-key evil-outer-text-objects-map "s" 'sentence-nav-evil-a-sentence)
      (define-key evil-inner-text-objects-map "s" 'sentence-nav-evil-inner-sentence))
    )
#+END_SRC
   

* tide
:PROPERTIES:
:ARCHIVE_TIME: 2023-09-30 Sat 10:55
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: languages/js/ts
:ARCHIVE_CATEGORY: init
:END:
#+BEGIN_SRC emacs-lisp :results output silent
  (use-package tide
   :ensure t
   :after (company flycheck)
   :hook ((typescript-ts-mode . tide-setup)
          (tsx-ts-mode . tide-setup)
          (typescript-ts-mode . tide-hl-identifier-mode)
          (before-save . tide-format-before-save))) 
#+end_src

* lisp
:PROPERTIES:
:ARCHIVE_TIME: 2023-09-30 Sat 20:08
:ARCHIVE_FILE: ~/.emacs.d/init.org
:ARCHIVE_OLPATH: languages
:ARCHIVE_CATEGORY: init
:END:
general lisp stuff

#+BEGIN_SRC emacs-lisp :results output silent
  (defvar lispular-modes-list
    'emacs-lisp-mode-hook
    'lisp-mode-hook)

  (add-hook 'lisp-mode-hook
	    (lambda ()
	      (set (make-local-variable 'lisp-indent-function)
		   'common-lisp-indent-function)))


  ;; (use-package smartparens
  ;;   :ensure t
  ;;   ;;:diminish ""

  ;;   :init 
  ;;   (require 'smartparens-config)

  ;;   (unbind-key  "C-M-f" smartparens-strict-mode-map)
  ;;   (unbind-key  "C-M-b" smartparens-strict-mode-map)
  ;;   (unbind-key  "C-M-u" smartparens-strict-mode-map)
  ;;   (unbind-key  "C-M-d" smartparens-strict-mode-map)
  ;;   (unbind-key  "C-M-p" smartparens-strict-mode-map)
  ;;   (unbind-key  "C-M-n" smartparens-strict-mode-map)
  ;;   (unbind-key  "M-s"   smartparens-strict-mode-map)
  ;;   (unbind-key  "M-<up>" smartparens-strict-mode-map)
  ;;   (unbind-key  "M-<down>"  smartparens-strict-mode-map)
  ;;   (unbind-key  "M-r" smartparens-strict-mode-map)
  ;;   (unbind-key  "M-(" smartparens-strict-mode-map)
  ;;   (unbind-key  "C-)"  smartparens-strict-mode-map)
  ;;   (unbind-key  "C-<right>" smartparens-strict-mode-map)
  ;;   (unbind-key  "C-}" smartparens-strict-mode-map)
  ;;   (unbind-key  "C-<left>" smartparens-strict-mode-map)
  ;;   (unbind-key  "C-(" smartparens-strict-mode-map)
  ;;   (unbind-key  "C-M-<left>" smartparens-strict-mode-map)
  ;;   (unbind-key  "C-{" smartparens-strict-mode-map)
  ;;   (unbind-key  "C-M-<right>" smartparens-strict-mode-map)
  ;;   (unbind-key  "M-S" smartparens-strict-mode-map)
  ;;   (unbind-key  "M-j" smartparens-strict-mode-map)
  ;;   (unbind-key  "M-?" smartparens-strict-mode-map)

  ;;   (add-hook 'emacs-lisp-mode-hook #'evil-smartparens-mode)


  ;;   :config
  ;;   (general-define-key
  ;;    :keymaps 'smartparens-mode-map
  ;;    :prefix ","
  ;;    "s" 'sp-splice-sexp
  ;;    "w" 'sp-wrap-round
  ;;    "(" 'sp-wrap-round
  ;;    "[" 'sp-wrap-curly
  ;;    "{" 'sp-wrap-square
  ;;    "o" 'sp-split-sexp
  ;;    "j" 'sp-join-sexp
  ;;    "r" 'sp-raise-sexp
  ;;    )
  ;;   (general-define-key
  ;;    :keymaps 'smartparens-mode-map
  ;;    :states '(normal visual motion)
  ;;    ")" 'sp-forward-sexp
  ;;    "(" 'sp-backward-sexp
  ;;    "C-(" 'sp-up-sexp
  ;;    "C-)" 'sp-down-sexp
  ;;    ">" 'sp-forward-slurp-sexp
  ;;    "<" 'sp-backward-slurp-sexp
  ;;    "C->" 'sp-forward-barf-sexp
  ;;    "C-<" 'sp-backward-barf-sexp
  ;;    )

  ;;   (use-package evil-smartparens
  ;;     :ensure t
  ;;     :init 
  ;;     (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
  ;;   )

  ;; (use-package rainbow-delimiters
  ;;   :ensure t
  ;;   :diminish ""
  ;;   :config
  ;;   (progn
  ;;     (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
  ;;     (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode)
  ;;     (add-hook 'slime-repl-mode-hook #'rainbow-delimiters-mode)
  ;;     (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)))

  ;; 			   ;;;     (eval-after-load "slime"
  ;; 			   ;;;       '(progn
  ;; 			   ;;;          (define-key evil-normal-state-map (kbd "M-.") 'slime-edit-definition)
  ;; 			   ;;;          (define-key evil-normal-state-map (kbd "M-,") 'slime-pop-find-definition-stack)))
  ;; 			   ;;;
  ;;      (use-package slime
  ;;        ;;:defer 1
  ;;        ;;:load-path  "~/.emacs.d/vendor/slime"
  ;;        :config (progn

  ;; 		 (load (expand-file-name "~/quicklisp/slime-helper.el"))
  ;; 		 (setq inferior-lisp-program 
  ;; 		       "/usr/local/bin/sbcl --noinform --no-linedit")
  ;; 		 (require 'slime-autoloads)
  ;; 		 (add-to-list 'load-path "~/.emacs.d/vendor/slime/contrib")
  ;; 		 (setq slime-contribs 
  ;; 		       '(slime-fancy 
  ;; 			 slime-asdf 
  ;; 					     ;slime-banner
  ;; 			 slime-indentation
  ;; 			 slime-quicklisp 
  ;; 			 slime-xref-browser
  ;; ))
  ;; 		 (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)
  ;; 		 (slime-setup))

  ;;        :bind (
  ;; 	      ;; ("C-c s" . slime-selector)
  ;; 	      ;; ("M-." . slime-edit-definition)
  ;; 	      ;; ("M-," . slime-pop-definition-stack)
  ;; 	      )
  ;;        )

  ;;      (require 'info-look)
#+END_SRC
   
