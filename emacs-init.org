#+TITLE: My Special Emacs Configuration
#+AUTHOR: logan mohseni
#+EMAIL: mohsenil85@gmail.com 


* workinonit
** make a new keymap

   #+BEGIN_SRC emacs-lisp
           (defvar evil-package-menu-mode-map
             (let ((map (make-sparse-keymap)))
               (set-keymap-parent map tabulated-list-mode-map)
               (define-key map "\C-m" 'package-menu-describe-package)
               (define-key map "u" 'package-menu-mark-unmark)
               (define-key map "\177" 'package-menu-backup-unmark)
               (define-key map "d" 'package-menu-mark-delete)
               (define-key map "i" 'package-menu-mark-install)
               (define-key map "U" 'package-menu-mark-upgrades)
               (define-key map "r" 'package-menu-refresh)
               (define-key map "f" 'package-menu-filter)
               (define-key map "~" 'package-menu-mark-obsolete-for-deletion)
               (define-key map "x" 'package-menu-execute)
               (define-key map "h" 'package-menu-quick-help)
               (define-key map "H" 'package-menu-hide-package)
               (define-key map "?" 'package-menu-describe-package)
               (define-key map "(" 'package-menu-toggle-hiding)
               (define-key map "/" 'isearch-forward-regexp)
               map)
             "Local keymap for `package-menu-mode' buffers.")

     (add-hook 'package-menu-mode-hook (lambda () ()))
   #+END_SRC

   #+RESULTS:
   : evil-package-menu-mode-map

* package config 
  #+BEGIN_SRC emacs-lisp
      (setq package-enable-at-startup nil) ; tells emacs not to load any packages before starting up
      ;; the following lines tell emacs where on the internet to look up
      ;; for new packages.
      (setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                               ("gnu"       . "http://elpa.gnu.org/packages/")
                               ("melpa"     . "http://melpa.org/packages/")
                               ("marmalade" . "http://marmalade-repo.org/packages/")))
      (package-initialize)

      ;; Bootstrap `use-package'
      (unless (package-installed-p 'use-package) ; unless it is already installed
        (package-refresh-contents) ; updage packages archive
        (package-install 'use-package)) ; and install the most recent version of use-package

      (require 'use-package)
   #+END_SRC
* packages
** ac mode
   #+BEGIN_SRC emacs-lisp
      ;      (use-package auto-complete
      ;        :ensure
      ;        :config
      ;        (progn
      ;          (require 'auto-complete-config)
      ;          (add-to-list 'ac-dictionary-directories "~/.emacs.d/dict/")
      ;          (ac-config-default)
      ;          (ac-set-trigger-key "TAB")
      ;          (ac-set-trigger-key "<tab>")
      ; ))
   #+END_SRC

   #+RESULTS:
   : t

** avy
   #+BEGIN_SRC emacs-lisp
(use-package avy :ensure t
  :commands (avy-goto-word-1))
   #+END_SRC

   #+RESULTS:

** better-defaults
   #+BEGIN_SRC emacs-lisp
  (use-package better-defaults :ensure )
   #+END_SRC

   #+RESULTS:

** deft org
   #+BEGIN_SRC emacs-lisp
;  (use-package deft 
;    :ensure
;    :config (progn
;              (setq
;               deft-extension "org"
;               deft-directory "~/org/"
;               deft-text-mode 'org-mode)
;              (global-set-key (kbd "H-d") 'deft)))
   #+END_SRC
** elfeed
   #+BEGIN_SRC emacs-lisp
      (use-package
        elfeed :ensure
        :config (progn
                  (evil-set-initial-state 'elfeed-show 'emacs)
                  (setq elfeed-feeds
                        '("http://feeds.igvita.com/igvita"
                           "http://www.tor.com/series/words-of-radiance-reread-on-torcom/feed/"
                          ("http://nedroid.com/feed/" comic)
                          ("http://crawdadswelcome.tumblr.com/rss" comic)
                          ("http://moonbeard.com/feed/atom/" comic)
                          ("http://gunshowcomic.com/rss.xml" comic)
                          ("http://www.goyedogs.com/rss" comic)
                          ("http://sticksangelica.tumblr.com/rss" comic)
"http://feeds2.feedburner.com/MachineLearningtheory"
"http://infostructuralist.wordpress.com/"
"http://nlpers.blogspot.com/feeds/posts/default"
"http://emacshorrors.com/feed.atom"
                          ("http://feeds.feedburner.com/thunderpaw?format=xml" comic)
                          ("http://studygroupcomics.com/main/feed/rss/" comic)
                          ("http://www.destructorcomics.com/?feed=rss" comic)
                          ("http://garfieldminusgarfield.net/rss" comic)
                          "http://www.tor.com/category/all-fiction/feed"
                          "http://nullprogram.com/feed/"
                          "http://blog.funcall.org/feed.xml"
                          ("http://owlturd.com/rss" comic)
                          "http://planet.lisp.org/rss20.xml"
                          "http://planet.clojure.in/atom.xml"
                          "http://cartographerswithoutborders.org/rss"
                          "http://irreal.org/blog/?feed=rss2"
                          "http://endlessparentheses.com/atom.xml"
                          "http://www.newyorker.com/feed/articles"
                          ("http://www.lunarbaboon.com/comics/rss.xml" comic)
                          "http://pragmaticemacs.com/feed/"
                          "http://www.skyandtelescope.com/astronomy-news/observing-news/feed/"
                          "http://planet.lisp.org/rss20.xml"
                          "http://lisptips.com/rss"
                          "http://what-if.xkcd.com/feed.atom"
                          ("http://xkcd.com/rss.xml" comic)
                          ("http://www.smbc-comics.com/rss.php" comic)
                          ("http://www.qwantz.com/rssfeed.php" comic)
                          "http://languagelog.ldc.upenn.edu/nll/?feed=rss2"
                          "http://english.bouletcorp.com/feed/"
                          ("http://pbfcomics.com/feed/feed.xml" comic)
                          "http://thecodelesscode.com/rss"
                          "http://bldgblog.blogspot.com/atom.xml"
                          "http://divisbyzero.com/feed/"
                          "http://blog.fogus.me/feed/"
                          "http://blog.tanyakhovanova.com/?feed=rss"))
      ) :bind ("C-c e" . elfeed)
        
        )

   #+END_SRC

   #+RESULTS:

** evil
*** evil-leader
    evil leader is required before evil
    #+BEGIN_SRC emacs-lisp
            (use-package evil-leader
            :ensure
            :config
            (progn
            (global-evil-leader-mode 1)
            (evil-leader/set-leader "<SPC>")
            (evil-leader/set-key "c" 'org-capture)
            (evil-leader/set-key "<SPC>" 'org-agenda-list)
            (evil-leader/set-key "o" (lambda ()
                                       ((interactive)
                                        (find-file "~/org/organizer.org")
                                        )))
      ))
    #+END_SRC

    #+RESULTS:
    : t

*** main evil
    #+BEGIN_SRC emacs-lisp
      (use-package evil
        :ensure
        :config
        (progn
          ;;(setq evil-default-state 'emacs)
          ;;(evil-set-initial-state 'elfeed-show-mode 'emacs) 
          (evil-set-initial-state 'snake-mode 'emacs) 
          ;;(evil-set-initial-state 'elfeed-search-mode 'emacs) 
          (evil-mode 1))
        :bind
        ("S-SPC" . evil-exit-emacs-state)
        )
    #+END_SRC

    #+RESULTS:

*** evil-rsi
    #+BEGIN_SRC emacs-lisp
      (use-package evil-rsi 
                  :diminish ""
:ensure 
:init (setq evil-rsi-mode 1) )  
    #+END_SRC

    #+RESULTS:

*** evil-org
    #+BEGIN_SRC emacs-lisp
    ;  (use-package evil-org :ensure :init (require 'evil-org))  
    #+END_SRC

    #+RESULTS:

*** vimmish fold
    #+BEGIN_SRC emacs-lisp
      ;; (use-package vimish-fold
      ;;   :ensure
      ;;   :config
      ;;   (progn
      ;;     (evil-leader/set-key "ff" 'vimish-fold)
      ;;     (evil-leader/set-key "fd" 'vimish-fold-delete)
      ;;     ))
    #+END_SRC
** evil-magit
   #+BEGIN_SRC emacs-lisp
      (use-package evil-magit :ensure)

   #+END_SRC

** flx
   #+BEGIN_SRC emacs-lisp
     (use-package flx :ensure t)

   #+END_SRC
** flycheck
   #+begin_src emacs-lisp
  (use-package flycheck
    :ensure
    :diminish ""
    :config
    (progn
      (add-hook 'after-init-hook #'global-flycheck-mode)))
      

(flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
        (id (one-or-more (not (any " "))))
        (message) line-end))
  :modes (text-mode markdown-mode gfm-mode))

(add-to-list 'flycheck-checkers 'proselint)

   #+end_src

   #+RESULTS:
   | proselint | ada-gnat | asciidoc | c/c++-clang | c/c++-gcc | c/c++-cppcheck | cfengine | chef-foodcritic | coffee | coffee-coffeelint | coq | css-csslint | d-dmd | elixir-dogma | emacs-lisp | emacs-lisp-checkdoc | erlang | eruby-erubis | fortran-gfortran | go-gofmt | go-golint | go-vet | go-build | go-test | go-errcheck | go-unconvert | groovy | haml | handlebars | haskell-stack-ghc | haskell-ghc | haskell-hlint | html-tidy | javascript-eslint | javascript-jshint | javascript-gjslint | javascript-jscs | javascript-standard | json-jsonlint | json-python-json | less | lua-luacheck | lua | perl | perl-perlcritic | php | php-phpmd | php-phpcs | processing | pug | puppet-parser | puppet-lint | python-flake8 | python-pylint | python-pycompile | r-lintr | racket | rpm-rpmlint | markdown-mdl | rst-sphinx | rst | ruby-rubocop | ruby-rubylint | ruby | ruby-jruby | rust-cargo | rust | scala | scala-scalastyle | scheme-chicken | scss-lint | sass/scss-sass-lint | sass | scss | sh-bash | sh-posix-dash | sh-posix-bash | sh-zsh | sh-shellcheck | slim | slim-lint | sql-sqlint | tex-chktex | tex-lacheck | texinfo | typescript-tslint | verilog-verilator | xml-xmlstarlet | xml-xmllint | yaml-jsyaml | yaml-ruby |

** general
   #+BEGIN_SRC emacs-lisp
(use-package general :ensure t
  :config
  (general-define-key "C-'" 'avy-goto-word-1)
  )
   #+END_SRC

** git-gutter-fringe
   #+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe
    :ensure
    :diminish ""
    :config
    (progn
      (require 'git-gutter-fringe)
      (global-git-gutter-mode t)))

   #+END_SRC

   #+RESULTS:
   : t

** helm
   taken from http://tuhdo.github.io/helm-intro.html
   things i need to remember
   - C-h f, which runs describe-function
   - C-h v, which runs describe-variable
   - C-h w, which runs where-is
*** helm proper
    #+BEGIN_SRC emacs-lisp
;;      (use-package helm
;;        :ensure
;;        :config
;;        (progn
;;          (require 'helm)
;;          (require 'helm-config)
;;          (setq helm-ff-transformer-show-only-basename nil)
;;          (setq helm-adaptive-history-file "~/.emacs/data/helm-history")
;;
;;
;;          (setq helm-M-x-fuzzy-match t)
;;          (setq helm-recentf-fuzzy-match t)
;;          (setq helm-mode-fuzzy-match t)
;;          (setq helm-buffers-fuzzy-matching t)
;;          (setq helm-ff-auto-update-initial-value t) ;; use c-backspact
;;          (setq helm-move-to-line-cycle-in-source t)
;;
;;          
;;          (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
;;          (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
;;          (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
;;          ;;(define-key shell-mode-map (kbd "C-c C-l") 'helm-comint-input-ring)
;;          (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history) 
;;
;;          (autoload 'helm-descbinds      "helm-descbinds" t)
;;          (autoload 'helm-eshell-history "helm-eshell"    t)
;;          (autoload 'helm-esh-pcomplete  "helm-eshell"    t)
;;
;;          (setq helm-autoresize-mode t)
;;          (setq helm-split-window-in-side-p t)
;;          (setq helm-ff-file-name-history-use-recentf t)
;;          (setq helm-autoresize-mode t)
;;
;;  (global-set-key (kbd "C-c h g") 'helm-google-suggest)
;;  (global-set-key (kbd "C-c h r") 'helm-register)
;;          (helm-mode 1))
;;        :bind
;;        (("M-x" . helm-M-x)
;;         ("C-x b" . helm-mini)
;;         ("C-h SPC" . helm-all-mark-rings)
;;         ("C-x C-b" . helm-buffers-list)
;;         ("C-x C-r" . helm-recentf)
;;         ("M-y" . helm-show-kill-ring)
;;         ("C-x C-f" . helm-find-files)
;;         ("C-c h o" . helm-occur)))
;;
;;      (use-package helm-descbinds :ensure :config
;;        (progn
;;          (require 'helm-descbinds)
;;          (helm-descbinds-mode)
;;          )
;;        )

    #+END_SRC

*** helm-swoop
    #+BEGIN_SRC emacs-lisp
  ;; (use-package helm-swoop 
  ;;   :ensure
  ;;   :config
  ;;   (progn
  ;;     (global-set-key (kbd "M-i") 'helm-swoop)
  ;;     (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
  ;;     (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
  ;;     (global-set-key (kbd "C-x M-i") 'helm-multi-swoop-all)

  ;;     ;; When doing isearch, hand the word over to helm-swoop
  ;;     (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
  ;;     ;; From helm-swoop to helm-multi-swoop-all
  ;;     (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
  ;;     ;; When doing evil-search, hand the word over to helm-swoop
  ;;     ;; (define-key evil-motion-state-map (kbd "M-i") 'helm-swoop-from-evil-search)

  ;;     ;; Instead of helm-multi-swoop-all, you can also use helm-multi-swoop-current-mode
  ;;     (define-key helm-swoop-map (kbd "M-m") 'helm-multi-swoop-current-mode-from-helm-swoop)

  ;;     ;; Move up and down like isearch
  ;;     (define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
  ;;     (define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
  ;;     (define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
  ;;     (define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line)

  ;;     ;; Save buffer when helm-multi-swoop-edit complete
  ;;     (setq helm-multi-swoop-edit-save t)

  ;;     ;; If this value is t, split window inside the current window
  ;;     (setq helm-swoop-split-with-multiple-windows nil)

  ;;     ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
  ;;     (setq helm-swoop-split-direction 'split-window-vertically)

  ;;     ;; If nil, you can slightly boost invoke speed in exchange for text color
  ;;     (setq helm-swoop-speed-or-color nil)

  ;;     ;; ;; Go to the opposite side of line from the end or beginning of line
  ;;     (setq helm-swoop-move-to-line-cycle t)

  ;;     ;; Optional face for line numbers
  ;;     ;; Face name is `helm-swoop-line-number-face`
  ;;     (setq helm-swoop-use-line-number-face t)))
    #+END_SRC
*** helm-ag
    #+BEGIN_SRC emacs-lisp
;(use-package helm-ag :ensure)

    #+END_SRC
*** helm-ack
    #+BEGIN_SRC emacs-lisp
;      (use-package helm-ack
;        :ensure)
          
    #+END_SRC
*** helm-gtags 
    #+BEGIN_SRC emacs-lisp
 ;;  (use-package helm-gtags
 ;;    :ensure
 ;;    :config
 ;;    (progn
 ;;      ;;; Enable helm-gtags-mode
 ;;      (add-hook 'c-mode-hook 'helm-gtags-mode)
 ;;      (add-hook 'c++-mode-hook 'helm-gtags-mode)
 ;;      (add-hook 'asm-mode-hook 'helm-gtags-mode)
 ;;      (add-hook 'java-mode-hook 'helm-gtags-mode)
 ;;
 ;;      ;; customize
 ;;;;      (setq
 ;;;;       (helm-gtags-path-style 'relative))
 ;;;;(setq  
 ;;;;       (helm-gtags-auto-update t)) 
 ;;
 ;;    (setq helm-gtags-prefix-key "C-t")
 ;;    (helm-gtags-suggested-key-mapping t)
 ;;      ;; key bindings
 ;;      (eval-after-load "helm-gtags"
 ;;        '(progn
 ;;           (define-key helm-gtags-mode-map (kbd "M-t") 'helm-gtags-find-tag)
 ;;           (define-key helm-gtags-mode-map (kbd "M-r") 'helm-gtags-find-rtag)
 ;;           (define-key helm-gtags-mode-map (kbd "M-s") 'helm-gtags-find-symbol)
 ;;           (define-key helm-gtags-mode-map (kbd "M-g M-p") 'helm-gtags-parse-file)
 ;;           (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
 ;;           (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
 ;;           (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack))))
 ;;
 ;;    
 ;;    )
 ;;
    #+END_SRC

    #+RESULTS:
    : t
    
    (info-lookup-add-help
    :mode 'lisp-mode
    :regexp "[^][()'\" \t\n]+"
    :ignore-case t
    :doc-spec '(("(ansicl)Symbol Index" nil nil nil)))

    ;;     (use-package log4slime
    ;;       :load-path "~/.quicklisp/dists/quicklisp/software/log4cl-20141217-git/elisp/")
    ;; (use-package fuzzy :ensure )
    ;; (use-package ac-slime
    ;;   :ensure
    ;;   :config (progn
    ;;             (add-hook 'slime-mode-hook 'set-up-slime-ac)
    ;;             (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
    ;;             (eval-after-load "auto-complete"
    ;;               '(add-to-list 'ac-modes 'slime-repl-mode))))

    #+END_SRC

    #+RESULTS:

** magit
   #+BEGIN_SRC emacs-lisp
      (use-package magit 
        :ensure t
        :config (progn 
                  (setq magit-completing-read-function 'ivy-completing-read))
        :bind ("C-x g" . magit-status))
   #+END_SRC

   #+RESULTS:

** Misc packages
   #+BEGIN_SRC emacs-lisp
          (use-package ag :ensure)
          ;;(use-package ggtags :ensure)
          (use-package better-defaults :ensure)
          (use-package markdown-mode :ensure)
;;          (use-package auctex :ensure :config (require 'tex) )

(add-hook 'LaTeX-mode-hook (lambda ()
  (push 
    '("Latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
      :help "Run Latexmk on file")
    TeX-command-list)))

   #+END_SRC

   #+RESULTS:
   : tex

** org-ac
   #+BEGIN_SRC emacs-lisp
;;      (use-package org-ac
;;        :ensure
;;        :init
;;        (progn
;;          (require 'org-ac)
;;          ;; Make config suit for you. About the config item, eval the following sexp.
;;          ;; (customize-group "org-ac")
;;          (org-ac/config-default)
;;          ) )  
   #+END_SRC
** org-mode
   #+BEGIN_SRC emacs-lisp
     (use-package org 
       :ensure
:diminish ""
       :config
       (progn
         (setq org-catch-invisible-edits t)
         (setq org-M-RET-may-split-line nil)
         (setq org-return-follows-link t)
         (setq org-hide-leading-stars t)
         (setq org-indent-mode t)
         ;;(setq org-log-done 'note)
         (setq org-log-into-drawer t)
         (setq org-show-hierarchy-above (quote ((default . t))))
         (setq org-show-siblings (quote ((default) (isearch) (bookmark-jump))))
         (setq org-default-notes-file "~/org/organizer.org")
         (setq  org-agenda-files (quote ("~/org")))
         (setq  org-agenda-ndays 7)
         (setq  org-deadline-warning-days 14)
         (setq  org-agenda-show-all-dates t)
         (setq  org-agenda-skip-deadline-if-done t)
         (setq  org-agenda-skip-scheduled-if-done t)
         (setq  org-agenda-start-on-weekday nil)
         (setq  org-reverse-note-order t)

         (setq org-todo-keywords
               (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                       (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))

         

         (setq org-todo-state-tags-triggers
               (quote (("CANCELLED" ("CANCELLED" . t))
                       ("WAITING" ("WAITING" . t))
                       ("HOLD" ("WAITING") ("HOLD" . t))
                       (done ("WAITING") ("HOLD"))
                       ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                       ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                       ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))



         ;;(setq org-agenda-start-with-follow-mode t)
         (setq org-use-tag-inheritance t)
         (setq org-capture-templates
               (quote (("t" "todo" entry (file+headline "~/org/organizer.org" "inbox")
                        "* TODO %?\n%U\n%a\n" )
                       ("n" "note" entry (file+headline "~/org/organizer.org" "inbox")
                        "* %? :NOTE:\n%U\n%a\n" )
                       ("i" "idea" entry (file+headline "~/org/organizer.org" "ideas")
                        "* %?\n" )
                       ("n" "information" entry (file+headline "~/org/organizer.org" "information")
                        "* %?\n" )
                       ("s" "shopping" checkitem
                        (file+headline "~/org/organizer.org" "shopping")
                        "- [ ] %?\n")
                       ("j" "journal" entry (file+datetree "~/org/organizer.org")
                        "* %?\n %U\n  %i\n  %a")
                       )))  


         ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
         (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                          (org-agenda-files :maxlevel . 9))))
         ;; Use full outline paths for refile targets - we file directly with IDO
         (setq org-refile-use-outline-path t)
         ;; Targets complete directly with IDO
                                             ;(setq org-outline-path-complete-in-steps nil)
         ;; Allow refile to create parent tasks with confirmation
         (setq org-refile-allow-creating-parent-nodes (quote confirm))

         
         (setq org-mobile-inbox-for-pull "~/org/flagged.org")

         (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg/")
       (defvar my-org-mobile-sync-timer nil)

       (defvar my-org-mobile-sync-secs (* 60 20))

       (defun my-org-mobile-sync-pull-and-push ()
         (org-mobile-pull)
         (org-mobile-push)
         (when (fboundp 'sauron-add-event)
           (sauron-add-event 'my 3 "Called org-mobile-pull and org-mobile-push")))

       (defun my-org-mobile-sync-start ()
         "Start automated `org-mobile-push'"
         (interactive)
         (setq my-org-mobile-sync-timer
               (run-with-idle-timer my-org-mobile-sync-secs t
                                    'my-org-mobile-sync-pull-and-push)))

       (defun my-org-mobile-sync-stop ()
         "Stop automated `org-mobile-push'"
         (interactive)
         (cancel-timer my-org-mobile-sync-timer))

       (my-org-mobile-sync-start)
       )
       :bind (
              ("C-c l" . org-store-link)
              ("C-c a" . org-agenda)
              ("C-c c" . org-capture)
              ))

     ;;put all DONE into archive
     (defun my-org-archive-done-tasks ()
       (interactive)
       (unless
           (org-map-entries 'org-archive-subtree "/DONE" 'file)))


     ;; (add-hook 'org-mode-hook
     ;;           (lambda ()
     ;;             (add-hook 'after-save-hook 'my-org-archive-done-tasks 'make-it-local)))

   #+END_SRC

   #+RESULTS:
   : my-org-archive-done-tasks

   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '(
        (lisp . t)
        (sh . t)
        (python . t)
        (ipython . t)
        ))

   #+END_SRC

   #+RESULTS:

** page-break-lines
   #+begin_src emacs-lisp
  (use-package page-break-lines
    :diminish ""
    :ensure t 
    :config (global-page-break-lines-mode 1))

   #+end_src

   #+RESULTS:
   : t
   
** paradox --better package search
   #+BEGIN_SRC emacs-lisp
(use-package paradox :ensure t)
   #+END_SRC

   #+RESULTS:

** persistent scratch
   #+BEGIN_SRC emacs-lisp
(use-package persistent-scratch :ensure
:config (persistent-scratch-setup-default))
   #+END_SRC

   #+RESULTS:
   : t

** powerline
   #+BEGIN_SRC emacs-lisp
  ;; (use-package powerline 
  ;;   :ensure
  ;;   :config (progn
  ;;             (require 'powerline)
  ;;             (powerline-center-evil-theme)))
   #+END_SRC

** projectile
   :PROPERTIES:
   :ORDERED:  t
   :END:
   #+BEGIN_SRC emacs-lisp
      (use-package projectile :ensure
        :config
        (progn
          (projectile-global-mode)
          (setq projectile-completion-system 'ivy)
          (setq projectile-switch-project-action 'projectile-find-file)
          (setq projectile-mode-line '(:eval (format " [%s]" (projectile-project-name))))
          ))
   #+END_SRC

   #+RESULTS:
   : t

** recursive narrow
   #+BEGIN_SRC emacs-lisp
     (use-package recursive-narrow :ensure
       :bind (("C-x n n" . recursive-narrow-or-widen-dwim)
              ("C-x n w" . recursive-widen-dwim)))
   #+END_SRC

   #+RESULTS:

** sentence navigation
   #+BEGIN_SRC emacs-lisp
      (use-package sentence-navigation
        :ensure t
        :bind (:map evil-motion-state-map 
                    ((")" . sentence-nav-evil-forward)
                     ("(" . sentence-nav-evil-backward)
                     ("g(" . sentence-nav-evil-backward-end)
                     ("g)" . sentence-nav-evil-forward-end)))
        :config
        (progn
          (define-key evil-outer-text-objects-map "s" 'sentence-nav-evil-a-sentence)
          (define-key evil-inner-text-objects-map "s" 'sentence-nav-evil-inner-sentence))
      )
   #+END_SRC

   #+RESULTS:

** swiper et al

   #+BEGIN_SRC emacs-lisp

     (use-package ivy :ensure t
       :diminish (ivy-mode . "") ; does not display ivy in the modeline
       :init (ivy-mode 1)        ; enable ivy globally at startup
       :bind (:map ivy-mode-map  ; bind in the ivy buffer
                   ("C-'" . ivy-avy)) ; C-' to ivy-avy
       :config
       (setq ivy-use-virtual-buffers t)   ; extend searching to bookmarks and …
       (setq ivy-height 10)               ; set height of the ivy window
       (setq ivy-count-format "(%d/%d) ") ; count format, from the ivy help page
       (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
                                             ;(setq ivy-display-style 'nil)
       (defun ivy-yank-action (x)
         (kill-new x))

       (defun ivy-copy-to-buffer-action (x)
         (with-ivy-window
           (insert x)))

       (ivy-set-actions
        t
        '(("i" ivy-copy-to-buffer-action "insert")
          ("y" ivy-yank-action "yank")))
       )

     (use-package counsel :ensure t
       :bind*                           ; load counsel when pressed
       (("M-x"     . counsel-M-x)       ; M-x use counsel
        ("C-x C-f" . counsel-find-file) ; C-x C-f use counsel-find-file
        ("C-x C-r" . counsel-recentf)   ; search recently edited files
        ("C-c f"   . counsel-git)       ; search for files in git repo
        ("C-c s"   . counsel-git-grep)  ; search for regexp in git repo
        ("C-c /"   . counsel-ag)        ; search for regexp in git repo using ag
        ("C-c l"   . counsel-locate)   ; search for files or else using locate
        ("C-h b"   . counsel-descbinds)   ; search for files or else using locate
        ("C-h v"   . counsel-describe-variable)   ; search for files or else using locate
        ("M-y"   . counsel-yank-pop)   ; clipboard
        ("C-h f"   . counsel-describe-function)   ; search for files or else using locate
        ("C-c C-r" . ivy-resume)


        ("C-s"   . swiper))        ; find 
       )

   #+END_SRC

   #+RESULTS:

** which key
   #+BEGIN_SRC emacs-lisp
      (use-package which-key 
        :ensure t
        :init
        (setq which-key-idle-delay 3)
        :diminish ""
        :config (progn (which-key-mode 1) ))

   #+END_SRC

   #+RESULTS:
   : t
** yasnippet
   #+BEGIN_SRC emacs-lisp
     ;; (use-package yasnippet
     ;;   :ensure t
     ;;   :diminish ""
     ;;   :config
     ;;   (progn
     ;;   (yas-global-mode 1)
     ;;     (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets"))
     ;;     ))

     ;; (use-package common-lisp-snippets
     ;;   :ensure t
     ;;   :config (require 'common-lisp-snippets))
   #+END_SRC

   #+RESULTS:
   : t
* languages
** clojure

   #+BEGIN_SRC emacs-lisp
  (use-package clojure-mode :ensure)
  (use-package cider :ensure)


   #+END_SRC

   #+RESULTS:

** java
   #+BEGIN_SRC emacs-lisp
  ;; (use-package emacs-eclim :ensure
  ;;   :config
  ;;   (progn
  ;;     (require 'eclim)
  ;;     (global-eclim-mode)
  ;;     (setf eclim-eclipse-dirs
  ;;           '("/Users/lmohseni/java-neon/Eclipse.app/Contents/Eclipse"))
  ;;     (setf eclim-executable 
  ;;           '("/Users/lmohseni/java-neon/Eclipse.app/Contents/Eclipse/eclim"))
  ;; (setq help-at-pt-display-when-idle t)
  ;; (setq help-at-pt-timer-delay 0.1)
  ;; (help-at-pt-set-timer)
  ;; ;; regular auto-complete initialization
  ;; (require 'auto-complete-config)
  ;; (ac-config-default)

  ;; ;; add the emacs-eclim source
  ;; (require 'ac-emacs-eclim-source)
  ;; (ac-emacs-eclim-config)
  ;;     ))

   #+END_SRC

   #+RESULTS:

** lisp
   #+BEGIN_SRC emacs-lisp
          (use-package paredit
            :ensure
            :config 
            (progn
              (add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
              (add-hook 'eval-expression-minibuffer-setup-hook 'enable-paredit-mode)
              (add-hook 'lisp-mode-hook             'enable-paredit-mode)
              (add-hook 'slime-repl-mode-hook            'enable-paredit-mode)
              (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
              (add-hook 'scheme-mode-hook           'enable-paredit-mode)
              ))

          (use-package smartparens
            :ensure t
            :diminish ""

            :init (require 'smartparens-config)
            :config (smartparens-global-strict-mode 1))

          (use-package evil-smartparens
            :ensure
            :diminish ""
            :config (progn
                      (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)))

          (use-package rainbow-delimiters
            :ensure
            :diminish ""
            :config
            (progn
              (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
              (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode)
              (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)))

          (evil-define-key 'normal paredit-mode ")" 'paredit-forward-up)
          (evil-define-key 'normal paredit-mode "(" 'paredit-backward-up)
          (evil-define-key 'normal paredit-mode (kbd "C-0") 'paredit-backward-down)
          (evil-define-key 'normal paredit-mode (kbd "C-9") 'paredit-forward-down)

          (eval-after-load "slime"
            '(progn
               (define-key evil-normal-state-map (kbd "M-.") 'slime-edit-definition)
               (define-key evil-normal-state-map (kbd "M-,") 'slime-pop-find-definition-stack)))

          (use-package slime
            :ensure
            :load-path  "~/.emacs.d/vendor/slime"
            :config (progn
                      (setq inferior-lisp-program 
                            "sbcl --noinform --no-linedit")
                      (require 'slime-autoloads)
                      (add-to-list 'load-path "~/.emacs.d/vendor/slime/contrib")
                      (setq slime-contribs 
     '(slime-fancy 
     slime-asdf 
     ;slime-banner
     slime-indentation
     slime-quicklisp 
     slime-xref-browser))
                      (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)

                      (slime-setup)
                      )
            
            :bind (
                   ("C-c s" . slime-selector)
                   ("M-." . slime-edit-definition)
                   ("M-," . slime-pop-definition-stack)
     )
          )

          (require 'info-look)
   #+END_SRC

** javascript

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.json" . js-mode))
(autoload 'js2-mode "js2" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
  (use-package ac-js2 :ensure)

  (defun my-js-mode-stuff ()
    (setq js2-highlight-level 3)
    (define-key js-mode-map "{" 'paredit-open-curly)
    (define-key js-mode-map "}" 'paredit-close-curly-and-newline)
    )
  (use-package js2-mode :ensure :config (my-js-mode-stuff))

   #+END_SRC

   #+RESULTS:
   : my-js-mode-stuff

** python
   #+BEGIN_SRC emacs-lisp
  (use-package jedi :ensure
    :config
    (progn
      (add-hook 'python-mode-hook 'jedi:setup)
      (setq jedi:complete-on-dot t)))
  (use-package ob-ipython :ensure)
  (use-package ein :ensure)
   #+END_SRC

   #+RESULTS:

* emacs
** name
*** 
    #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Logan Mohseni")
    (setq user-mail-address "mohsenil85@gmail.com")
    #+END_SRC
  
** inital buffer
   #+BEGIN_SRC emacs-lisp
  ;(setq initial-buffer-choice "~/org")
  ;(setq initial-buffer-choice "~/org/organizer.org")
  
(setq initial-buffer-choice  (bookmark-bmenu-list))

;  (org-agenda-list)
;  (delete-other-windows)
;  (org-agenda-day-view)
   #+END_SRC

   #+RESULTS:
   :  %% Bookmark                      File

** inital frame size
   #+BEGIN_SRC emacs-lisp
     ;; (add-to-list 'initial-frame-alist '(height . 51 )) 
     ;; (add-to-list 'initial-frame-alist '(width . 177 )) 
     ;; (add-to-list 'initial-frame-alist '(top . 1 )) 
     ;; (add-to-list 'initial-frame-alist '(left . 1 )) 
   #+END_SRC

   #+RESULTS:

** tool bars, menu bars, and pop ups
   #+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
   #+END_SRC
** backups to tmp
   #+BEGIN_SRC emacs-lisp
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
   #+END_SRC
** cursor and startup screen
   #+BEGIN_SRC emacs-lisp
     (blink-cursor-mode -1)
     (setq inhibit-startup-screen t)
     (setq inhibit-startup-echo-area-message "lmohseni")
     (setq inhibit-startup-message t)
   #+END_SRC

   #+RESULTS:
   : t

** mark mode
   #+BEGIN_SRC emacs-lisp
     ;;;(transient-mark-mode t)
   #+END_SRC
** Asking questions
   #+BEGIN_SRC emacs-lisp
   (defalias 'yes-or-no-p 'y-or-n-p)
   (setq use-dialog-box nil)
   #+END_SRC

   #+RESULTS:

** silence bell
   #+BEGIN_SRC  emacs-lisp
(setq ring-bell-function nil)
   #+END_SRC
** narrow-to-region
   this is what i'm trying to learn.  
   C-x n p to narrow and
   C-x n w to widen to a page (delineated by ^L chars)
   #+BEGIN_SRC emacs-lisp
;(put 'narrow-to-page 'disabled nil)
   #+END_SRC 
** Mode line defaults
   #+BEGIN_SRC emacs-lisp
;(line-number-mode t)
;(column-number-mode t)
;(size-indication-mode t)
   #+END_SRC
** line-wraping
   #+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)

   #+END_SRC

   #+RESULTS:
   : t

** global linum mode
   #+BEGIN_SRC emacs-lisp
(global-linum-mode)


   #+END_SRC

   #+RESULTS:
   : t

** line and paren highlighting
   #+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (setq show-paren-style 'parenthesis)
   #+END_SRC
** color theme
   #+BEGIN_SRC emacs-lisp
       ;;(use-package gandalf-theme :ensure t)
     ;;  (use-package mbo70s-theme :ensure t)
     ;; (use-package warm-night-theme :ensure t)
     ;;  (use-package slime-theme :ensure t)
     ;;  (use-package basic-theme :ensure t)
     ;;  (use-package minimal-theme :ensure t)
     ;; (use-package white-theme :ensure t)
      ;;(use-package paper-theme :ensure t )
      ;(use-package soft-charcoal-theme :ensure t )
      (use-package soft-morning-theme :ensure t )
      ;(use-package django-theme :ensure t )
      ;;(use-package hydandata-light-theme :ensure t)

     ;(load-theme 'adwaita)
  ;   (load-theme 'gandalf)
     ; (load-theme 'mbo70s)
     
     (setq my-theme 'soft-morning)

     (enable-theme my-theme)
     (load-theme my-theme t t)
   #+END_SRC

   #+RESULTS:
   : t

** utf-8 stuff
   #+BEGIN_SRC emacs-lisp


 (setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8-unix)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

   #+END_SRC

   #+RESULTS:

** bindings
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-o") 'other-window)
   (global-set-key (kbd "C-x C-k") 'kill-this-buffer)
   #+END_SRC

   #+RESULTS:
   : kill-this-buffer

** prompts
   #+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq confirm-nonexistent-file-or-buffer nil)

  (setq kill-buffer-query-functions
    (remq 'process-kill-buffer-query-function
           kill-buffer-query-functions))


   #+END_SRC
** tool tips
   #+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(setq tooltip-use-echo-area t)

   #+END_SRC
** set inital directroy to home
   #+BEGIN_SRC emacs-lisp
  (setq default-directory (getenv "HOME"))

   #+END_SRC
** jump to dired
   #+BEGIN_SRC emacs-lisp

(require 'dired-x)

   #+END_SRC

   #+RESULTS:
   : dired-x

** registers
   #+BEGIN_SRC emacs-lisp
(set-register ?e (cons 'file "~/.emacs.d/emacs-init.org"))
(set-register ?o (cons 'file "~/org/organizer.org"))
(set-register ?w (cons 'file "~/org/work.org"))
(set-register ?z (cons 'file "~/.zshrc"))
(set-register ?d (cons 'file "~/Projects/lisp/drogue/drogue.lisp"))
   #+END_SRC

   #+RESULTS:
   : (file . ~/Projects/lisp/drogue/drogue.lisp)

** hippie-expand 
   as per http://blog.binchen.org/posts/autocomplete-with-a-dictionary-with-hippie-expand.html
   and 
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "M-/") 'hippie-expand)

     ;; The actual expansion function
     (defun try-expand-by-dict (old)
       ;; old is true if we have already attempted an expansion
       (unless (bound-and-true-p ispell-minor-mode)
         (ispell-minor-mode 1))

       ;; english-words.txt is the fallback dicitonary
       (if (not ispell-alternate-dictionary)
           (setq ispell-alternate-dictionary (file-truename "~/.emacs.d/misc/english-words.txt")))
       (let ((lookup-func (if (fboundp 'ispell-lookup-words)
                            'ispell-lookup-words
                            'lookup-words)))
         (unless old
           (he-init-string (he-lisp-symbol-beg) (point))
           (if (not (he-string-member he-search-string he-tried-table))
             (setq he-tried-table (cons he-search-string he-tried-table)))
           (setq he-expand-list
                 (and (not (equal he-search-string ""))
                      (funcall lookup-func (concat (buffer-substring-no-properties (he-lisp-symbol-beg) (point)) "*")))))
         (if (null he-expand-list)
           (if old (he-reset-string))
           (he-substitute-string (car he-expand-list))
           (setq he-expand-list (cdr he-expand-list))
           t)
         ))

(defun try-expand-flexible-abbrev (old)
  "Try to complete word using flexible matching.

Flexible matching works by taking the search string and then
interspersing it with a regexp for any character. So, if you try
to do a flexible match for `foo' it will match the word
`findOtherOtter' but also `fixTheBoringOrange' and
`ifthisisboringstopreadingnow'.

The argument OLD has to be nil the first call of this function, and t
for subsequent calls (for further possible completions of the same
string).  It returns t if a new completion is found, nil otherwise."
  (if (not old)
      (progn
        (he-init-string (he-lisp-symbol-beg) (point))
        (if (not (he-string-member he-search-string he-tried-table))
            (setq he-tried-table (cons he-search-string he-tried-table)))
        (setq he-expand-list
              (and (not (equal he-search-string ""))
                   (he-flexible-abbrev-collect he-search-string)))))
  (while (and he-expand-list
              (he-string-member (car he-expand-list) he-tried-table))
    (setq he-expand-list (cdr he-expand-list)))
  (if (null he-expand-list)
      (progn
        (if old (he-reset-string))
        ())
      (progn
        (he-substitute-string (car he-expand-list))
        (setq he-expand-list (cdr he-expand-list))
        t)))

(defun he-flexible-abbrev-collect (str)
  "Find and collect all words that flex-matches STR.
See docstring for `try-expand-flexible-abbrev' for information
about what flexible matching means in this context."
  (let ((collection nil)
        (regexp (he-flexible-abbrev-create-regexp str)))
    (save-excursion
      (goto-char (point-min))
      (while (search-forward-regexp regexp nil t)
        ;; Is there a better or quicker way than using
        ;; `thing-at-point' here?
        (setq collection (cons (thing-at-point 'word) collection))))
    collection))

(defun he-flexible-abbrev-create-regexp (str)
  "Generate regexp for flexible matching of STR.
See docstring for `try-expand-flexible-abbrev' for information
about what flexible matching means in this context."
  (concat "\\b" (mapconcat (lambda (x) (concat "\\w*" (list x))) str "")
          "\\w*" "\\b"))

     (setq hippie-expand-try-functions-list
           '(try-complete-file-name-partially
             try-complete-file-name
             try-expand-all-abbrevs
             try-expand-list
             try-expand-line
             try-expand-dabbrev
             try-expand-dabbrev-all-buffers
             try-expand-dabbrev-from-kill
             try-complete-lisp-symbol-partially
             try-complete-lisp-symbol
             try-expand-by-dict
             ;;try-expand-flexible-abbrev
             yas-hippie-try-expand
))
   #+END_SRC

   #+RESULTS:
   | try-complete-file-name-partially | try-complete-file-name | try-expand-all-abbrevs | try-expand-list | try-expand-line | try-expand-dabbrev | try-expand-dabbrev-all-buffers | try-expand-dabbrev-from-kill | try-complete-lisp-symbol-partially | try-complete-lisp-symbol | try-expand-by-dict | try-expand-flexible-abbrev | yas-hippie-try-expand |

** text-mode stuff
   #+BEGIN_SRC emacs-lisp

     ;(add-hook 'text-mode-hook 'flyspell-mode)
;    ;(add-hook 'text-mode-hook 'writeroom-mode)
     ;(add-hook 'text-mode-hook #'(lambda()(linum-mode 0)))
   #+END_SRC

   #+RESULTS:
   | (lambda nil (linum-mode 0)) | writeroom-mode | flyspell-mode | text-mode-hook-identify |


** recentf
   #+BEGIN_SRC emacs-lisp
 (recentf-mode 1)
     (run-at-time nil (* 5 60) 'recentf-save-list)
   #+END_SRC

   #+RESULTS:
   : [nil 22483 8721 398038 300 recentf-save-list nil nil 0]

*** more sanity
    #+BEGIN_SRC emacs-lisp
 (setq delete-old-versions -1 )		; delete excess backup versions silently
 (setq version-control t )		; use version control
 (setq vc-make-backup-files t )		; make backups file even when in version controlled dir
 (setq backup-directory-alist `(("." . "~/.emacs.d/backups")) ) ; which directory to put backups file
 (setq vc-follow-symlinks t )				       ; don't ask for confirmation when opening symlinked file
 (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ) ;transform backups file name
 (setq inhibit-startup-screen t )	; inhibit useless and old-school startup screen
 (setq ring-bell-function 'ignore )	; silent bell when you make a mistake
 (setq coding-system-for-read 'utf-8 )	; use utf-8 by default
 (setq coding-system-for-write 'utf-8 )
 (setq sentence-end-double-space nil)	; sentence SHOULD end with only a point.
 (setq default-fill-column 80)		; toggle wrapping text at the 80th character
 (setq initial-scratch-message ";;;;happy hacking") ; print a default message in the empty scratch buffer opened at startup

    #+END_SRC

    #+RESULTS:
    : ;;;;happy hacking
**** taken from http://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/

** persist kill ring
   #+BEGIN_SRC emacs-lisp
     (savehist-mode 1)
     (setq savehist-additional-variables 
     '(kill-ring search-ring regexp-search-ring))
     (setq savehist-file "~/.emacs.d/tmp/savehist")
   #+END_SRC

   #+RESULTS:
   : ~/.emacs.d/tmp/savehist

* functionaria 
  Helper functions to use either in an editing session or to help with
  configuration
  #+BEGIN_SRC emacs-lisp
          (require 'cl)

      (defun copy-filename-to-clip ()
    "Put the current file name on the clipboard"
        (interactive)
        (let ((filename (if (equal major-mode 'dired-mode)
                            default-directory
                          (buffer-file-name))))
          (when filename
            (with-temp-buffer
              (insert filename)
              (clipboard-kill-region (point-min) (point-max)))
            (message filename))))

          (defun load-init-file ()
            (interactive)
            (load-file (concat "~/.emacs.d/init.el")))

          (defun add-hook-to-modes (modes hook)
            (dolist (mode modes)
              (add-hook (intern (concat (symbol-name mode) "-mode-hook"))
                        hook)))

          (defun halt ()
            (interactive)
            (save-some-buffers)
            (kill-emacs))

          (defun my-whitespace-mode-hook ()
            (setq whitespace-action '(auto-cleanup)
                  whitespace-style  '(face tabs trailing lines-tail empty)
                  ;; use fill-column value instead
                  whitespace-line-column nil)
            (whitespace-mode))

          (defun my-makefile-mode-hook ()
            (setq indent-tabs-mode t
                  tab-width 4))

          (defun make-region-read-only (start end)
            (interactive "*r")
            (let ((inhibit-read-only t))
              (put-text-property start end 'read-only t)))

          (defun make-region-read-write (start end)
            (interactive "*r")
            (let ((inhibit-read-only t))
              (put-text-property start end 'read-only nil)))

  #+END_SRC

  #+RESULTS:
  : make-region-read-write

** clipboard-to-elfeed
   #+BEGIN_SRC emacs-lisp
  (defun my-clipboard-to-elfeed ()
    (interactive)
    (let ((link (pbpaste)))
      (elfeed-add-feed link)))
   #+END_SRC

   #+RESULTS:
   : my-clipboard-to-elfeed

* osx specific 
  handle meta as command
  toggle fullscreen
  #+BEGIN_SRC emacs-lisp
    (when (eq system-type 'darwin)
        (setq mac-command-modifier 'meta)
        (setq mac-option-modifier 'super)
        (setq mac-control-modifier 'control)
        (setq mac-function-modifier 'hyper)
    (setq mac-pass-command-to-system nil) 
        (defun toggle-fullscreen ()
          "Toggle full screen"
          (interactive)
          (set-frame-parameter
           nil 'fullscreen
           (when (not (frame-parameter nil 'fullscreen)) 'fullboth)))
        (defun pbcopy ()
          (interactive)
          (call-process-region (point) (mark) "pbcopy")
          (setq deactivate-mark t))

        (defun pbpaste ()
          (interactive)
          (call-process-region (point) (if mark-active (mark) (point)) "pbpaste" t t))

        (defun pbcut ()
          (interactive)
          (pbcopy)
          (delete-region (region-beginning) (region-end)))

        (global-set-key (kbd "H-c") 'pbcopy)
        (global-set-key (kbd "H-v") 'pbpaste)
        (global-set-key (kbd "H-x") 'pbcut)

        ;;recomended by brew
        (let ((default-directory "/usr/local/share/emacs/site-lisp/"))
          (normal-top-level-add-subdirs-to-load-path))

      )

  #+END_SRC

  #+RESULTS:

* mu4e stuff
  #+BEGIN_SRC emacs-lisp
;;    (add-to-list 'load-path "~/builds/mu/mu4e")
;;    (require 'smtpmail)
;;
;;    (setq mu4e-mu-binary "/usr/local/bin/mu")
;;  (setq mail-user-agent 'mu4e-user-agent)
;;
;;
;;  (require 'org-mu4e)
;;
;;    ; smtp
;;    (setq message-send-mail-function 'smtpmail-send-it
;;          smtpmail-starttls-credentials
;;          '(("imap.gmail.com" 587 nil nil))
;;          smtpmail-default-smtp-server "imap.gmail.com"
;;          smtpmail-smtp-server "imap.gmail.com"
;;          smtpmail-smtp-service 587
;;          smtpmail-debug-info t)
;;
;;    (require 'mu4e)
;;
;;    (setq mu4e-maildir (expand-file-name "~/.mail/gmail"))
;;
;;    (setq mu4e-drafts-folder "/[GMail]/.Drafts")
;;    (setq mu4e-sent-folder   "/[GMail]/.Sent Items")
;;    (setq mu4e-trash-folder  "/[GMail]/.Trash")
;;    (setq message-signature-file "~/.emacs.d/.signature") ; put your signature in this file
;;
;;    ; get mail
;;    (setq mu4e-get-mail-command "mbsync -a "
;;          mu4e-html2text-command "w3m -T text/html"
;;          mu4e-update-interval 120
;;          mu4e-headers-auto-update t
;;          mu4e-compose-signature-auto-include nil)
;;
;;    (setq mu4e-maildir-shortcuts
;;          '( ("Inbox"        . ?i)
;;             ("Sent Items"   . ?s)
;;             ("Trash"        . ?t)
;;             ("Drafts"       . ?d)))
;;
;;    ;; show images
;;    ;;;(setq mu4e-show-images t)
;;
;;    ;; use imagemagick, if available
;;    (when (fboundp 'imagemagick-register-types)
;;      (imagemagick-register-types))
;;
;;    ;; general emacs mail settings; used when composing e-mail
;;    ;; the non-mu4e-* stuff is inherited from emacs/message-mode
;;    (setq mu4e-reply-to-address "mohsenil85@gmail.com"
;;        user-mail-address "mohsenil85@gmail.com"
;;        user-full-name  "Logan Mohseni")
;;
;;    ;; don't save message to Sent Messages, IMAP takes care of this
;;     (setq mu4e-sent-messages-behavior 'delete)
;;
;;    ;; spell check
;;    (add-hook 'mu4e-compose-mode-hook
;;            (defun my-do-compose-stuff ()
;;               "My settings for message composition."
;;               (set-fill-column 80)
;;               (flyspell-mode)))
;;   
;;  (global-set-key (kbd "C-c m") 'mu4e)
  #+END_SRC

  #+RESULTS:
  : mu4e
    

  #+RESULTS:
  : t
* diminish
  #+BEGIN_SRC emacs-lisp
(diminish 'wrap-region-mode)
(diminish 'yas-minor-mode)
(diminish 'auto-revert-mode )
(diminish 'undo-tree-mode )
(diminish 'git-gutter-mode )
(diminish 'visual-line-mode )
(diminish 'flyspell-mode )


  #+END_SRC

  #+RESULTS:
  |   |

  
