#+TITLE: My Special Emacs Configuration
#+AUTHOR: logan mohseni
#+EMAIL: mohsenil85@gmail.com 


* workinonit
** make a new keymap
   
   #+BEGIN_SRC emacs-lisp :results output silent
           (defvar evil-package-menu-mode-map
             (let ((map (make-sparse-keymap)))
               (set-keymap-parent map tabulated-list-mode-map)
               (define-key map "\C-m" 'package-menu-describe-package)
               (define-key map "u" 'package-menu-mark-unmark)
               (define-key map "\177" 'package-menu-backup-unmark)
               (define-key map "d" 'package-menu-mark-delete)
               (define-key map "i" 'package-menu-mark-install)
               (define-key map "U" 'package-menu-mark-upgrades)
               (define-key map "r" 'package-menu-refresh)
               (define-key map "f" 'package-menu-filter)
               (define-key map "~" 'package-menu-mark-obsolete-for-deletion)
               (define-key map "x" 'package-menu-execute)
               (define-key map "h" 'package-menu-quick-help)
               (define-key map "H" 'package-menu-hide-package)
               (define-key map "?" 'package-menu-describe-package)
               (define-key map "(" 'package-menu-toggle-hiding)
               (define-key map "/" 'isearch-forward-regexp)
               map)
             "Local keymap for `package-menu-mode' buffers.")

     (add-hook 'package-menu-mode-hook (lambda () ()))
   #+END_SRC
* package config 
  #+BEGIN_SRC emacs-lisp :results output silent
      (setq package-enable-at-startup nil) ; tells emacs not to load any packages before starting up
      ;; the following lines tell emacs where on the internet to look up
      ;; for new packages.
      (setq package-archives '(
;("org"       . "http://orgmode.org/elpa/")
                               ("gnu"       . "https://elpa.gnu.org/packages/")
                               ("melpa"     . "https://melpa.org/packages/")
                    ;("marmalade" . "http://marmalade-repo.org/packages/")
))
      (package-initialize)

      ;; Bootstrap `use-package'
      (unless (package-installed-p 'use-package) ; unless it is already installed
        (package-refresh-contents) ; updage packages archive
        (package-install 'use-package)) ; and install the most recent version of use-package

      (require 'use-package)
  #+END_SRC
* packages
** emojify
   #+BEGIN_SRC emacs-lisp :results output silent
     (use-package emojify :ensure t)
   #+END_SRC
** bind-map
   #+BEGIN_SRC emacs-lisp :results output silent
     (use-package bind-map :ensure t)
   #+END_SRC
** general
   evil leader is required before evil
   #+BEGIN_SRC emacs-lisp :results output silent
     (use-package general
       :ensure t   
       :config   (setq leader "SPC"))
     ;;       (use-package evil-leader
     ;;       :ensure
     ;;       :config
     ;;       (progn
     ;;       (global-evil-leader-mode 1)
     ;;       (evil-leader/set-leader "<SPC>")
     ;;       (evil-leader/set-key "c" 'org-capture)
     ;;       (evil-leader/set-key "<SPC>" 'org-agenda-list)
     ;;       (evil-leader/set-key "o" (lambda ()
     ;;                                  ((interactive)
     ;;                                   (find-file "~/org/organizer.org")
     ;;                                   )))
     ;; ))
   #+END_SRC
   
** evil
*** main evil
    #+BEGIN_SRC emacs-lisp :results output silent
      (use-package evil
        :ensure
        :config
        (progn
          (evil-set-initial-state 'snake-mode 'emacs) 
          (evil-mode 1))
        :bind
        ("S-SPC" . evil-exit-emacs-state))
    #+END_SRC
    
    
*** evil-rsi
    #+BEGIN_SRC emacs-lisp :results output silent
      (use-package evil-rsi 
        :diminish ""
        :ensure t 
        :init (setq evil-rsi-mode 1) )  
    #+END_SRC
    
    
*** evil-org
    #+BEGIN_SRC emacs-lisp :results output silent
    ;  (use-package evil-org :ensure :init (require 'evil-org))  
    #+END_SRC
    
    
*** vimmish fold
    #+BEGIN_SRC emacs-lisp :results output silent
      ;; (use-package vimish-fold
      ;;   :ensure
      ;;   :config
      ;;   (progn
      ;;     (evil-leader/set-key "ff" 'vimish-fold)
      ;;     (evil-leader/set-key "fd" 'vimish-fold-delete)
      ;;     ))
    #+END_SRC
** ac mode
   #+BEGIN_SRC emacs-lisp :results output silent
      ;      (use-package auto-complete
      ;        :ensure
      ;        :config
      ;        (progn
      ;          (require 'auto-complete-config)
      ;          (add-to-list 'ac-dictionary-directories "~/.emacs.d/dict/")
      ;          (ac-config-default)
      ;          (ac-set-trigger-key "TAB")
      ;          (ac-set-trigger-key "<tab>")
      ; ))
   #+END_SRC
   
** avy
   #+BEGIN_SRC emacs-lisp :results output silent
;(use-package avy :ensure t
;  :commands (avy-goto-word-1))
   #+END_SRC
   
** better-defaults
   #+BEGIN_SRC emacs-lisp :results output silent
  (use-package better-defaults :ensure )
   #+END_SRC
   
** deft org
   #+BEGIN_SRC emacs-lisp :results output silent
;  (use-package deft 
;    :ensure
;    :config (progn
;              (setq
;               deft-extension "org"
;               deft-directory "~/org/"
;               deft-text-mode 'org-mode)
;              (global-set-key (kbd "H-d") 'deft)))
   #+END_SRC

** evil-evilified-state
   #+BEGIN_SRC emacs-lisp :results output silent
     (use-package evil-evilified-state
       :load-path "~/Projects/elisp/evil-evilified-state/")

   #+END_SRC
** elfeed
   #+BEGIN_SRC emacs-lisp :results output silent
     (use-package elfeed
       :ensure evil
       :config
       (progn
         (evil-set-initial-state 'elfeed-show 'emacs)
         (setq elfeed-feeds
               '("http://feeds.igvita.com/igvita"
                 "http://www.tor.com/series/words-of-radiance-reread-on-torcom/feed/"
                 ("http://nedroid.com/feed/" comic)
                 ("http://crawdadswelcome.tumblr.com/rss" comic)
                 ("http://moonbeard.com/feed/atom/" comic)
                 ("http://gunshowcomic.com/rss.xml" comic)
                 ("http://www.goyedogs.com/rss" comic)
                 ("http://sticksangelica.tumblr.com/rss" comic)
                 "http://feeds2.feedburner.com/MachineLearningtheory"
                 "http://infostructuralist.wordpress.com/"
                 "http://nlpers.blogspot.com/feeds/posts/default"
                 "http://emacshorrors.com/feed.atom"
                 ("http://feeds.feedburner.com/thunderpaw?format=xml" comic)
                 ("http://studygroupcomics.com/main/feed/rss/" comic)
                 ("http://www.destructorcomics.com/?feed=rss" comic)
                 ("http://garfieldminusgarfield.net/rss" comic)
                 "http://www.tor.com/category/all-fiction/feed"
                 "http://nullprogram.com/feed/"
                 "http://blog.funcall.org/feed.xml"
                 ("http://owlturd.com/rss" comic)
                 "http://planet.lisp.org/rss20.xml"
                 "http://planet.clojure.in/atom.xml"
                 "http://cartographerswithoutborders.org/rss"
                 "http://irreal.org/blog/?feed=rss2"
                 "http://endlessparentheses.com/atom.xml"
                 "http://www.newyorker.com/feed/articles"
                 ("http://www.lunarbaboon.com/comics/rss.xml" comic)
                 "http://pragmaticemacs.com/feed/"
                 "http://www.skyandtelescope.com/astronomy-news/observing-news/feed/"
                 "http://planet.lisp.org/rss20.xml"
                 "http://lisptips.com/rss"
                 "http://what-if.xkcd.com/feed.atom"
                 ("http://xkcd.com/rss.xml" comic)
                 ("http://www.smbc-comics.com/rss.php" comic)
                 ("http://www.qwantz.com/rssfeed.php" comic)
                 "http://languagelog.ldc.upenn.edu/nll/?feed=rss2"
                 "http://english.bouletcorp.com/feed/"
                 ("http://pbfcomics.com/feed/feed.xml" comic)
                 "http://thecodelesscode.com/rss"
                 "http://bldgblog.blogspot.com/atom.xml"
                 "http://divisbyzero.com/feed/"
                 "http://blog.fogus.me/feed/"
                 "http://blog.tanyakhovanova.com/?feed=rss"))
         (setq elfeed-db-directory "~/.emacs.d/elfeed")
         (setq evil-motion-state-modes 
               (append evil-motion-state-modes
                       '(elfeed-search-mode elfeed-show-mode)))
         (general-define-key
          :keymaps 'elfeed-search-mode-map
          :states 'motion
          "RET" 'elfeed-search-show-entry    
          "r" 'elfeed-update))
       :bind
       ("C-c e" . elfeed))

     (use-package elfeed-goodies
       :ensure t   
       :after elfeed   
       :config   
       (setq 
        elfeed-goodies/powerline-default-separator nil
        elfeed-goodies/entry-pane-position 'bottom) 
       (elfeed-goodies/setup)

       (general-define-key :keymaps 'elfeed-show-mode-map   
                           :states 'motion 
                           "+" 'elfeed-show-tag
                           "-" 'elfeed-show-untag
                           "C-n" 'elfeed-goodies/split-show-next 
                           "C-p" 'elfeed-goodies/split-show-prev)   
       (general-define-key :keymaps
                           'elfeed-search-mode-map
                           :states 'motion
                           "+" 'elfeed-search-tag-all
                           "-" 'elfeed-search-untag-all))

   #+END_SRC
   
** evil-magit
   #+BEGIN_SRC emacs-lisp :results output silent
      (use-package evil-magit :ensure)

   #+END_SRC
   
** flx
   #+BEGIN_SRC emacs-lisp :results output silent
     (use-package flx :ensure t)

   #+END_SRC
** flycheck
   #+begin_src emacs-lisp
  (use-package flycheck
    :ensure
    :diminish ""
    :config
    (progn
      (add-hook 'after-init-hook 'global-flycheck-mode)))
      

(flycheck-define-checker proselint
  "A linter for prose."
  :command ("proselint" source-inplace)
  :error-patterns
  ((warning line-start (file-name) ":" line ":" column ": "
        (id (one-or-more (not (any " "))))
        (message) line-end))
  :modes (text-mode markdown-mode gfm-mode))

(add-to-list 'flycheck-checkers 'proselint)

   #+end_src
   
** general
   #+BEGIN_SRC emacs-lisp :results output silent
(use-package general :ensure t
  :config
  (general-define-key "C-'" 'avy-goto-word-1)
  )
   #+END_SRC
   
** git-gutter-fringe
   #+BEGIN_SRC emacs-lisp :results output silent
  (use-package git-gutter-fringe
    :ensure
    :diminish ""
    :config
    (progn
      (require 'git-gutter-fringe)
      (global-git-gutter-mode t)))

   #+END_SRC
   
** helm
   taken from http://tuhdo.github.io/helm-intro.html
   things i need to remember
   - C-h f, which runs describe-function
   - C-h v, which runs describe-variable
   - C-h w, which runs where-is
*** helm proper
    #+BEGIN_SRC emacs-lisp :results output silent
          (use-package helm
            :ensure t
            :diminish ""
            :config
            (progn
              (require 'helm)
              (require 'helm-config)
              (setq helm-ff-transformer-show-only-basename nil)
              (setq helm-adaptive-history-file "~/.emacs/data/helm-history")
      
      
              (setq helm-M-x-fuzzy-match t)
              (setq helm-recentf-fuzzy-match t)
              (setq helm-mode-fuzzy-match t)
              (setq helm-buffers-fuzzy-matching t)
              (setq helm-ff-auto-update-initial-value t) ;; use c-backspact
              (setq helm-move-to-line-cycle-in-source t)
      
              
              (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
              (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
              (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
              ;;(define-key shell-mode-map (kbd "C-c C-l") 'helm-comint-input-ring)
              (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history) 
      
              (autoload 'helm-descbinds      "helm-descbinds" t)
              (autoload 'helm-eshell-history "helm-eshell"    t)
              (autoload 'helm-esh-pcomplete  "helm-eshell"    t)
      
              (setq helm-autoresize-mode t)
              (setq helm-split-window-in-side-p t)
              (setq helm-ff-file-name-history-use-recentf t)
              (setq helm-autoresize-mode t)
      
      (global-set-key (kbd "C-c h g") 'helm-google-suggest)
      (global-set-key (kbd "C-c h r") 'helm-register)
              (helm-mode 1))
            :bind
            (("M-x" . helm-M-x)
             ("C-x b" . helm-mini)
             ("C-h SPC" . helm-all-mark-rings)
             ("C-x C-b" . helm-buffers-list)
             ("C-x C-r" . helm-recentf)
             ("M-y" . helm-show-kill-ring)
             ("C-x C-f" . helm-find-files)
             ("M-s o" . helm-occur)))
      
          (use-package helm-descbinds :ensure :config
            (progn
              (require 'helm-descbinds)
              (helm-descbinds-mode)
              )
            )

    #+END_SRC
    
*** helm-swoop
    #+BEGIN_SRC emacs-lisp :results output silent
;;      (use-package helm-swoop 
;;        :ensure
;;        :config
;;        (progn
;;          (global-set-key (kbd "M-i") 'helm-swoop)
;;          (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
;;          (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
;;          (global-set-key (kbd "C-x M-i") 'helm-multi-swoop-all)
;;
;;          ;; When doing isearch, hand the word over to helm-swoop
;;          (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
;;          ;; From helm-swoop to helm-multi-swoop-all
;;          (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
;;          ;; When doing evil-search, hand the word over to helm-swoop
;;          ;; (define-key evil-motion-state-map (kbd "M-i") 'helm-swoop-from-evil-search)
;;
;;          ;; Instead of helm-multi-swoop-all, you can also use helm-multi-swoop-current-mode
;;          (define-key helm-swoop-map (kbd "M-m") 'helm-multi-swoop-current-mode-from-helm-swoop)
;;
;;          ;; Move up and down like isearch
;;          (define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
;;          (define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
;;          (define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
;;          (define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line)
;;
;;          ;; Save buffer when helm-multi-swoop-edit complete
;;          (setq helm-multi-swoop-edit-save t)
;;
;;          ;; If this value is t, split window inside the current window
;;          (setq helm-swoop-split-with-multiple-windows nil)
;;
;;          ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
;;          (setq helm-swoop-split-direction 'split-window-vertically)
;;
;;          ;; If nil, you can slightly boost invoke speed in exchange for text color
;;          (setq helm-swoop-speed-or-color nil)
;;
;;          ;; ;; Go to the opposite side of line from the end or beginning of line
;;          (setq helm-swoop-move-to-line-cycle t)
;;
;;          ;; Optional face for line numbers
;;          ;; Face name is `helm-swoop-line-number-face`
;;          (setq helm-swoop-use-line-number-face t)))
    #+END_SRC
*** helm-ag
    #+BEGIN_SRC emacs-lisp :results output silent
(use-package helm-ag :ensure)

    #+END_SRC
*** helm-ack
    #+BEGIN_SRC emacs-lisp :results output silent
      (use-package helm-ack
        :ensure)
          
    #+END_SRC
*** helm-gtags 
    #+BEGIN_SRC emacs-lisp :results output silent
        (use-package helm-gtags
          :ensure t
          :config
          (progn
            ;;; Enable helm-gtags-mode
            (add-hook 'c-mode-hook 'helm-gtags-mode)
            (add-hook 'c++-mode-hook 'helm-gtags-mode)
            (add-hook 'asm-mode-hook 'helm-gtags-mode)
            (add-hook 'java-mode-hook 'helm-gtags-mode)

            ;; customize
            (setq
             helm-gtags-path-style 'relative)
      (setq  
             helm-gtags-auto-update t) 

          (setq helm-gtags-prefix-key "C-t")
    ;      (helm-gtags-suggested-key-mapping t)
            ;; key bindings
            (eval-after-load "helm-gtags"
              '(progn
                 (define-key helm-gtags-mode-map (kbd "M-t") 'helm-gtags-find-tag)
                 (define-key helm-gtags-mode-map (kbd "M-r") 'helm-gtags-find-rtag)
                 (define-key helm-gtags-mode-map (kbd "M-s") 'helm-gtags-find-symbol)
                 (define-key helm-gtags-mode-map (kbd "M-g M-p") 'helm-gtags-parse-file)
                 (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
                 (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
                 (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack))))

          
          )

    #+END_SRC
    
    
** magit
   #+BEGIN_SRC emacs-lisp :results output silent
      (use-package magit 
        :ensure t
        ;;:config (progn (setq magit-completing-read-function '-completing-read))
        :bind ("C-x g" . magit-status))
   #+END_SRC
   
** Misc packages
   #+BEGIN_SRC emacs-lisp :results output silent
          (use-package ag :ensure)
          ;;(use-package ggtags :ensure)
          (use-package better-defaults :ensure)
          (use-package markdown-mode :ensure)
;;          (use-package auctex :ensure :config (require 'tex) )

(add-hook 'LaTeX-mode-hook (lambda ()
  (push 
    '("Latexmk" "latexmk -pdf %s" TeX-run-TeX nil t
      :help "Run Latexmk on file")
    TeX-command-list)))

   #+END_SRC
   
** org-ac
   #+BEGIN_SRC emacs-lisp :results output silent
;;      (use-package org-ac
;;        :ensure
;;        :init
;;        (progn
;;          (require 'org-ac)
;;          ;; Make config suit for you. About the config item, eval the following sexp.
;;          ;; (customize-group "org-ac")
;;          (org-ac/config-default)
;;          ) )  
   #+END_SRC
** org-mode
   #+BEGIN_SRC emacs-lisp :results output silent
     (use-package org 
       :ensure
:diminish ""
       :config
       (progn
         (setq org-catch-invisible-edits t)
         (setq org-M-RET-may-split-line nil)
         (setq org-return-follows-link t)
         (setq org-hide-leading-stars t)
         (setq org-indent-mode t)
         ;;(setq org-log-done 'note)
         (setq org-log-into-drawer t)
         (setq org-show-hierarchy-above (quote ((default . t))))
         (setq org-show-siblings (quote ((default) (isearch) (bookmark-jump))))
         (setq org-default-notes-file "~/org/organizer.org")
         (setq  org-agenda-files (quote ("~/org")))
         (setq  org-agenda-ndays 7)
         (setq  org-deadline-warning-days 14)
         (setq  org-agenda-show-all-dates t)
         (setq  org-agenda-skip-deadline-if-done t)
         (setq  org-agenda-skip-scheduled-if-done t)
         (setq  org-agenda-start-on-weekday nil)
         (setq  org-reverse-note-order t)

         (setq org-todo-keywords
               (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                       (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))

         

         (setq org-todo-state-tags-triggers
               (quote (("CANCELLED" ("CANCELLED" . t))
                       ("WAITING" ("WAITING" . t))
                       ("HOLD" ("WAITING") ("HOLD" . t))
                       (done ("WAITING") ("HOLD"))
                       ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                       ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                       ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))



         ;;(setq org-agenda-start-with-follow-mode t)
         (setq org-use-tag-inheritance t)
         (setq org-capture-templates
               (quote (("t" "todo" entry (file+headline "~/org/organizer.org" "inbox")
                        "* TODO %?\n%U\n%a\n" )
                       ("n" "note" entry (file+headline "~/org/organizer.org" "inbox")
                        "* %? :NOTE:\n%U\n%a\n" )
                       ("i" "idea" entry (file+headline "~/org/organizer.org" "ideas")
                        "* %?\n" )
                       ("n" "information" entry (file+headline "~/org/organizer.org" "information")
                        "* %?\n" )
                       ("s" "shopping" checkitem
                        (file+headline "~/org/organizer.org" "shopping")
                        "- [ ] %?\n")
                       ("j" "journal" entry (file+datetree "~/org/organizer.org")
                        "* %?\n %U\n  %i\n  %a")
                       )))  


         ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
         (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                          (org-agenda-files :maxlevel . 9))))
         ;; Use full outline paths for refile targets - we file directly with IDO
         (setq org-refile-use-outline-path t)
         ;; Targets complete directly with IDO
                                             ;(setq org-outline-path-complete-in-steps nil)
         ;; Allow refile to create parent tasks with confirmation
         (setq org-refile-allow-creating-parent-nodes (quote confirm))

         
         (setq org-mobile-inbox-for-pull "~/org/flagged.org")

         (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg/")
       (defvar my-org-mobile-sync-timer nil)

       (defvar my-org-mobile-sync-secs (* 60 20))

       (defun my-org-mobile-sync-pull-and-push ()
         (org-mobile-pull)
         (org-mobile-push)
         (when (fboundp 'sauron-add-event)
           (sauron-add-event 'my 3 "Called org-mobile-pull and org-mobile-push")))

       (defun my-org-mobile-sync-start ()
         "Start automated `org-mobile-push'"
         (interactive)
         (setq my-org-mobile-sync-timer
               (run-with-idle-timer my-org-mobile-sync-secs t
                                    'my-org-mobile-sync-pull-and-push)))

       (defun my-org-mobile-sync-stop ()
         "Stop automated `org-mobile-push'"
         (interactive)
         (cancel-timer my-org-mobile-sync-timer))

       (my-org-mobile-sync-start)
       )
       :bind (
              ("C-c l" . org-store-link)
              ("C-c a" . org-agenda)
              ("C-c c" . org-capture)
              ))

     ;;put all DONE into archive
     (defun my-org-archive-done-tasks ()
       (interactive)
       (unless
           (org-map-entries 'org-archive-subtree "/DONE" 'file)))


     ;; (add-hook 'org-mode-hook
     ;;           (lambda ()
     ;;             (add-hook 'after-save-hook 'my-org-archive-done-tasks 'make-it-local)))

   #+END_SRC
   
   
   #+BEGIN_SRC emacs-lisp :results output silent
     (org-babel-do-load-languages
      'org-babel-load-languages
      '(
        (lisp . t)
        (sh . t)
        (python . t)
        ))

   #+END_SRC
   
** page-break-lines
   #+begin_src emacs-lisp
  (use-package page-break-lines
    :diminish ""
    :ensure t 
    :config (global-page-break-lines-mode 1))

   #+end_src
   
** keyfreq
   #+BEGIN_SRC emacs-lisp :results output silent
(use-package keyfreq
 :ensure t
:init
(require 'keyfreq)
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)

 )
   #+END_SRC
   
** paradox --better package search
   #+BEGIN_SRC emacs-lisp :results output silent
(use-package paradox :ensure t)
   #+END_SRC
   
** persistent scratch
   #+BEGIN_SRC emacs-lisp :results output silent
(use-package persistent-scratch :ensure t
:config (persistent-scratch-setup-default))
   #+END_SRC
   
** powerline
   #+BEGIN_SRC emacs-lisp :results output silent
  ;; (use-package powerline 
  ;;   :ensure
  ;;   :config (progn
  ;;             (require 'powerline)
  ;;             (powerline-center-evil-theme)))
   #+END_SRC
   
** projectile
   :PROPERTIES: 
   :ORDERED:  t
   :END:
   #+BEGIN_SRC emacs-lisp :results output silent
      (use-package projectile :ensure
        :config
        (progn
          (projectile-global-mode)
          (setq projectile-completion-system 'helm)
          (setq projectile-create-missing-test-files t)
          (setq projectile-switch-project-action 'projectile-dired)
          (setq projectile-mode-line '(:eval (format " [%s]" (projectile-project-name))))
          ))
   #+END_SRC
   
** recursive narrow
   #+BEGIN_SRC emacs-lisp :results output silent
     (use-package recursive-narrow :ensure
       :bind (("C-x n n" . recursive-narrow-or-widen-dwim)
              ("C-x n w" . recursive-widen-dwim)))
   #+END_SRC
   
** sentence navigation
   #+BEGIN_SRC emacs-lisp :results output silent
      (use-package sentence-navigation
        :ensure t
        :bind (:map evil-motion-state-map 
                    ((")" . sentence-nav-evil-forward)
                     ("(" . sentence-nav-evil-backward)
                     ("g(" . sentence-nav-evil-backward-end)
                     ("g)" . sentence-nav-evil-forward-end)))
        :config
        (progn
          (define-key evil-outer-text-objects-map "s" 'sentence-nav-evil-a-sentence)
          (define-key evil-inner-text-objects-map "s" 'sentence-nav-evil-inner-sentence))
      )
   #+END_SRC
   
** swiper et al
   
   #+BEGIN_SRC emacs-lisp :results output silent
     ;; (use-package ivy 
     ;;   :ensure  ivy-hydra 
     ;;   :diminish (ivy-mode . "") ; does not display ivy in the modeline
     ;;   :init (ivy-mode 1)        ; enable ivy globally at startup
     ;;   :bind (:map ivy-mode-map  ; bind in the ivy buffer
     ;;               ("C-'" . ivy-avy)) ; C-' to ivy-avy
     ;;   :config
     ;;   (setq ivy-use-virtual-buffers t)   ; extend searching to bookmarks and …
     ;;   (setq ivy-height 10)               ; set height of the ivy window
     ;;   (setq ivy-count-format "(%d/%d) ") ; count format, from the ivy help page
     ;;   (setq ivy-re-builders-alist '((t . ivy--regex-fuzzy)))
     ;;                                         ;(setq ivy-display-style 'nil)
     ;;   (defun ivy-yank-action (x)
     ;;     (kill-new x))

     ;;   (defun ivy-copy-to-buffer-action (x)
     ;;     (with-ivy-window
     ;;       (insert x)))

     ;;   (ivy-set-actions
     ;;    t
     ;;    '(("i" ivy-copy-to-buffer-action "insert")
     ;;      ("y" ivy-yank-action "yank")))
     ;;   )

     ;; (use-package counsel :ensure t
     ;;   :bind*                           ; load counsel when pressed
     ;;   (("M-x"     . counsel-M-x)       ; M-x use counsel
     ;;    ("C-x C-f" . counsel-find-file) ; C-x C-f use counsel-find-file
     ;;    ("C-x C-r" . counsel-recentf)   ; search recently edited files
     ;;                                         ;("C-c f"   . counsel-git)       ; search for files in git repo
     ;;                                         ;("C-c s"   . counsel-git-grep)  ; search for regexp in git repo
     ;;    ("C-c /"   . counsel-ag)        ; search for regexp in git repo using ag
     ;;                                         ;("C-c l"   . counsel-locate)   ; search for files or else using locate
     ;;    ("C-h b"   . counsel-descbinds)   ; search for files or else using locate
     ;;    ("C-h v"   . counsel-describe-variable)   ; search for files or else using locate
     ;;    ("M-y"   . counsel-yank-pop)   ; clipboard
     ;;    ("C-h f"   . counsel-describe-function)   ; search for files or else using locate
     ;;    ("C-c C-r" . ivy-resume)


     ;;    ("C-s"   . swiper))        ; find 
     ;;   )
     ;; ;
                                             ;
   #+END_SRC
   
** which key
   #+BEGIN_SRC emacs-lisp :results output silent
      (use-package which-key 
        :ensure t
        :init
        (setq which-key-idle-delay 4)
        :diminish ""
        :config (progn (which-key-mode 1) ))

   #+END_SRC

** 
** dumb-jump
   #+BEGIN_SRC emacs-lisp :results output silent
(use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config (setq dumb-jump-selector 'helm)
  :ensure)

   #+END_SRC
** dired
   vinagresque
   #+BEGIN_SRC emacs-lisp :results output silent
     (use-package dired+
       :init
       (progn
         (setq diredp-hide-details-initially-flag t)
         (setq diredp-hide-details-propagate-flag t)
         ;; use single buffer for all dired navigation
         ;; disable font themeing from dired+
         (setq font-lock-maximum-decoration (quote ((dired-mode . 1) (t . t))))
         (toggle-diredp-find-file-reuse-dir 1)
         ))


     (use-package dired
       :defer t
       :config
       (evilified-state-evilify dired-mode dired-mode-map
                                "j"         'evil-next-line
                                "k"         'evil-previous-line
                                "-"         'dired-up-directory
                                "0"         'dired-back-to-start-of-files
                                (kbd "C-j") 'dired-next-subdir
                                (kbd "C-k") 'dired-prev-subdir
                                "I"         'vinegar/dotfiles-toggle
                                (kbd "~")   '(lambda ()(interactive) (find-alternate-file "~/"))
                                (kbd "RET") 'dired-find-file-other-window
                                "f"         'helm-find-files
                                "J"         'dired-goto-file
                                (kbd "C-f") 'find-name-dired
                                "H"         'diredp-dired-recent-dirs
                                "T"         'dired-tree-down
                                "K"         'dired-do-kill-lines
                                "r"         'revert-buffer
                                (kbd "C-r") 'dired-do-redisplay
                                "gg"        'evil-goto-first-line
                                "G"         'evil-goto-line))

     (define-key evil-normal-state-map (kbd "-") 'dired-jump)
   #+END_SRC
** yasnippet
   #+BEGIN_SRC emacs-lisp :results output silent
     ;; (use-package yasnippet
     ;;   :ensure t
     ;;   :diminish ""
     ;;   :config
     ;;   (progn
     ;;   (yas-global-mode 1)
     ;;     (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets"))
     ;;     ))

     ;; (use-package common-lisp-snippets
     ;;   :ensure t
     ;;   :config (require 'common-lisp-snippets))
   #+END_SRC
   
* languages
** clojure
   
   #+BEGIN_SRC emacs-lisp :results output silent
          (use-package clojure-mode :ensure)
          (use-package cider :ensure t
            )
   ;  (use-package inf-clojure :ensure t)
     (add-hook 'clojure-mode-hook #'eldoc-mode)

     (add-to-list 'auto-mode-alist '("\\.boot\\'" . clojure-mode))


   #+END_SRC
   
** java
   #+BEGIN_SRC emacs-lisp :results output silent
     (use-package meghanada 
       :ensure t
       :config 
     (progn
     (add-hook 'java-mode-hook
               (lambda ()
                 ;; meghanada-mode on
                 (meghanada-mode t)
                 (add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))
     )
     )
       ;; (use-package emacs-eclim :ensure
       ;;   :config
       ;;   (progn
       ;;     (require 'eclim)
       ;;     (global-eclim-mode)
       ;;     (setf eclim-eclipse-dirs
       ;;           '("/Users/lmohseni/java-neon/Eclipse.app/Contents/Eclipse"))
       ;;     (setf eclim-executable 
       ;;           '("/Users/lmohseni/java-neon/Eclipse.app/Contents/Eclipse/eclim"))
       ;; (setq help-at-pt-display-when-idle t)
       ;; (setq help-at-pt-timer-delay 0.1)
       ;; (help-at-pt-set-timer)
       ;; ;; regular auto-complete initialization
       ;; (require 'auto-complete-config)
       ;; (ac-config-default)

       ;; ;; add the emacs-eclim source
       ;; (require 'ac-emacs-eclim-source)
       ;; (ac-emacs-eclim-config)
       ;;     ))

   #+END_SRC
   
** lisp
   #+BEGIN_SRC emacs-lisp :results output silent
     (use-package paredit
       :ensure t
       :config 
       (progn
         (add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
         (add-hook 'eval-expression-minibuffer-setup-hook 'enable-paredit-mode)
         (add-hook 'lisp-mode-hook             'enable-paredit-mode)
         (add-hook 'slime-repl-mode-hook            'enable-paredit-mode)
         (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
         (add-hook 'scheme-mode-hook           'enable-paredit-mode)
         (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
         (add-hook 'clojure-mode-hook 'paredit-mode)
         (add-hook 'clojurescript-mode-hook 'paredit-mode)
         (add-hook 'clojurec-mode-hook 'paredit-mode)

         (evil-define-key 'normal paredit-mode ")" 'paredit-forward-up)
         (evil-define-key 'normal paredit-mode "(" 'paredit-backward-up)
         (evil-define-key 'normal paredit-mode (kbd "C-0") 'paredit-backward-down)
         (evil-define-key 'normal paredit-mode (kbd "C-9") 'paredit-forward-down)


         ))

     ;;;     (use-package smartparens
     ;;;       :ensure t
     ;;;       :diminish ""
     ;;;
     ;;;       :init (require 'smartparens-config)
     ;;;       :config (smartparens-global-strict-mode 1))
     ;;;
     ;;;     (use-package evil-smartparens
     ;;;       :ensure
     ;;;       :diminish ""
     ;;;       :config (progn
     ;;;                 (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)))

     (use-package rainbow-delimiters
       :ensure
       :diminish ""
       :config
       (progn
         (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
         (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode)
         (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)))

     (eval-after-load "slime"
       '(progn
          (define-key evil-normal-state-map (kbd "M-.") 'slime-edit-definition)
          (define-key evil-normal-state-map (kbd "M-,") 'slime-pop-find-definition-stack)))

     (use-package slime
       :ensure
       :load-path  "~/.emacs.d/vendor/slime"
       :config (progn
                 (load (expand-file-name "~/quicklisp/slime-helper.el"))
                 (setq inferior-lisp-program 
                       "/usr/local/bin/sbcl --noinform --no-linedit")
                 (require 'slime-autoloads)
                 (add-to-list 'load-path "~/.emacs.d/vendor/slime/contrib")
                 (setq slime-contribs 
                       '(slime-fancy 
                         slime-asdf 
                                             ;slime-banner
                         slime-indentation
                         slime-quicklisp 
                         slime-xref-browser))
                 (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol)

                 (slime-setup)
                 )
       
       :bind (
              ("C-c s" . slime-selector)
              ("M-." . slime-edit-definition)
              ("M-," . slime-pop-definition-stack)
              )
       )

     (require 'info-look)
   #+END_SRC
   
** javascript
   
   #+BEGIN_SRC emacs-lisp :results output silent
  (add-to-list 'auto-mode-alist '("\\.json" . js-mode))
(autoload 'js2-mode "js2" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
  (use-package ac-js2 :ensure)

  (defun my-js-mode-stuff ()
    (setq js2-highlight-level 3)
    (define-key js-mode-map "{" 'paredit-open-curly)
    (define-key js-mode-map "}" 'paredit-close-curly-and-newline)
    )
  (use-package js2-mode :ensure :config (my-js-mode-stuff))

   #+END_SRC
   
** python
   #+BEGIN_SRC emacs-lisp :results output silent
  (use-package jedi :ensure
    :config
    (progn
      (add-hook 'python-mode-hook 'jedi:setup)
      (setq jedi:complete-on-dot t)))
  (use-package ob-ipython :ensure)
  ;(use-package ein :ensure)
   #+END_SRC
   
** cpp
   #+BEGIN_SRC emacs-lisp :results output silent
;;from http://cachestocaches.com/2015/8/c-completion-emacs/
; (use-package irony
;   :ensure t
;   :defer t
;   :init
;   (add-hook 'c++-mode-hook 'irony-mode)
;   (add-hook 'c-mode-hook 'irony-mode)
;   (add-hook 'objc-mode-hook 'irony-mode)
;   :config
;   ;; replace the `completion-at-point' and `complete-symbol' bindings in
;   ;; irony-mode's buffers by irony-mode's function
;   (defun my-irony-mode-hook ()
;     (define-key irony-mode-map [remap completion-at-point]
;       'irony-completion-at-point-async)
;     (define-key irony-mode-map [remap complete-symbol]
;       'irony-completion-at-point-async))
;   (add-hook 'irony-mode-hook 'my-irony-mode-hook)
;   (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
;   )

; ;; == company-mode ==
; (use-package company
;   :ensure t
;   :defer t
;   :init (add-hook 'after-init-hook 'global-company-mode)
;   :config
;   (use-package company-irony :ensure t :defer t)
;   (setq company-idle-delay              nil
; 	company-minimum-prefix-length   2
; 	company-show-numbers            t
; 	company-tooltip-limit           20
; 	company-dabbrev-downcase        nil
; 	company-backends                '((company-irony company-gtags))
; 	)
;   :bind ("C-;" . company-complete-common)
;   )

   #+END_SRC
   
** typescript
   #+BEGIN_SRC emacs-lisp :results output silent

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (flycheck-mode +1)
    (setq flycheck-check-syntax-automatically '(save mode-enabled))
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1)
    ;; company is an optional dependency. You have to
    ;; install it separately via package-install
    ;; `M-x package-install [ret] company`
    (company-mode +1))

  (use-package tide :ensure t :config
    ;; aligns annotation to the right hand side
    (setq company-tooltip-align-annotations t)

    ;; formats the buffer before saving
    (add-hook 'before-save-hook 'tide-format-before-save)

    (add-hook 'typescript-mode-hook #'setup-tide-mode)
    )   

   #+END_SRC
   
* emacs
** name
    #+BEGIN_SRC emacs-lisp :results output silent
    (setq user-full-name "Logan Mohseni")
    (setq user-mail-address "mohsenil85@gmail.com")
    #+END_SRC
    
** inital buffer
   #+BEGIN_SRC emacs-lisp :results output silent
  ;(setq initial-buffer-choice "~/org")
  ;(setq initial-buffer-choice "~/org/organizer.org")
  
;(setq initial-buffer-choice  (bookmark-bmenu-list))

;  (org-agenda-list)
;  (delete-other-windows)
;  (org-agenda-day-view)
   #+END_SRC
   
** inital frame size
   #+BEGIN_SRC emacs-lisp :results output silent
      (add-to-list 'initial-frame-alist '(height . 25 )) 
      (add-to-list 'initial-frame-alist '(width . 80 )) 
     ;; (add-to-list 'initial-frame-alist '(top . 1 )) 
     ;; (add-to-list 'initial-frame-alist '(left . 1 )) 
   #+END_SRC
   
** tool bars, menu bars, and pop ups
   #+BEGIN_SRC emacs-lisp :results output silent
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
   #+END_SRC
** backups to tmp
   #+BEGIN_SRC emacs-lisp :results output silent
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))
   #+END_SRC
** cursor and startup screen
   #+BEGIN_SRC emacs-lisp :results output silent
     (blink-cursor-mode -1)
     (setq inhibit-startup-screen t)
     (setq inhibit-startup-echo-area-message "lmohseni")
     (setq inhibit-startup-message t)
   #+END_SRC
   
** mark mode
   #+BEGIN_SRC emacs-lisp :results output silent
     ;;;(transient-mark-mode t)
   #+END_SRC
** Asking questions
   #+BEGIN_SRC emacs-lisp :results output silent
   (defalias 'yes-or-no-p 'y-or-n-p)
   (setq use-dialog-box nil)
   #+END_SRC
   
** silence bell
   #+BEGIN_SRC  emacs-lisp
(setq ring-bell-function nil)
   #+END_SRC
** narrow-to-region
   this is what i'm trying to learn.  
   C-x n p to narrow and
   C-x n w to widen to a page (delineated by ^L chars)
   #+BEGIN_SRC emacs-lisp :results output silent
;(put 'narrow-to-page 'disabled nil)
   #+END_SRC 
** Mode line defaults
   #+BEGIN_SRC emacs-lisp :results output silent
;(line-number-mode t)
;(column-number-mode t)
;(size-indication-mode t)
   #+END_SRC
** line-wraping
   #+BEGIN_SRC emacs-lisp :results output silent
(global-visual-line-mode t)

   #+END_SRC
   
** global linum mode
   #+BEGIN_SRC emacs-lisp :results output silent
(global-linum-mode)
   #+END_SRC
** line and paren highlighting
   #+BEGIN_SRC emacs-lisp :results output silent
  (show-paren-mode t)
  (setq show-paren-style 'parenthesis)
   #+END_SRC
** color theme
   #+BEGIN_SRC emacs-lisp :results output silent
     ;;       (use-package gandalf-theme :ensure t)
     ;;  (use-package mbo70s-theme :ensure t)
     ;;(use-package warm-night-theme :ensure t)
     (use-package soft-morning-theme :ensure t)
     ;;(use-package alect-themes :ensure t)
     ;;(use-package yoshi-theme :ensure t)
     ;;  (use-package slime-theme :ensure t)
     ;;  (use-package basic-theme :ensure t)
     ;;  (use-package minimal-theme :ensure t)
     ;; (use-package white-theme :ensure t)
     ;;(use-package paper-theme :ensure t )
                                             ;(use-package soft-charcoal-theme :ensure t )
     ;;(use-package soft-morning-theme :ensure t )
                                             ;(use-package django-theme :ensure t )
     ;;(use-package hydandata-light-theme :ensure t)
     ;;(use-package solarized-theme :ensure t)

                                             ;(load-theme 'adwaita)
                                             ;   (load-theme 'gandalf)
                                             ; (load-theme 'mbo70s)

     (setq my-theme 'soft-morning)
     (enable-theme my-theme)
     (load-theme my-theme t t)
   #+END_SRC
** utf-8 stuff
   #+BEGIN_SRC emacs-lisp :results output silent
 (setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8-unix)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

   #+END_SRC
   
** bindings
   #+BEGIN_SRC emacs-lisp :results output silent
   (global-set-key (kbd "M-o") 'other-window)
   (global-set-key (kbd "C-x C-k") 'kill-this-buffer)
   #+END_SRC
   
** prompts
   #+BEGIN_SRC emacs-lisp :results output silent
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq confirm-nonexistent-file-or-buffer nil)

  (setq kill-buffer-query-functions
    (remq 'process-kill-buffer-query-function
           kill-buffer-query-functions))


   #+END_SRC
** tool tips
   #+BEGIN_SRC emacs-lisp :results output silent
(tooltip-mode -1)
(setq tooltip-use-echo-area t)

   #+END_SRC
** set inital directroy to home
   #+BEGIN_SRC emacs-lisp :results output silent
  (setq default-directory (getenv "HOME"))

   #+END_SRC
** jump to dired
   #+BEGIN_SRC emacs-lisp :results output silent

(require 'dired-x)

   #+END_SRC
   
** registers
   #+BEGIN_SRC emacs-lisp :results output silent
(set-register ?e (cons 'file "~/.emacs.d/emacs-init.org"))
(set-register ?o (cons 'file "~/org/organizer.org"))
(set-register ?w (cons 'file "~/org/work.org"))
(set-register ?z (cons 'file "~/.zshrc"))
(set-register ?d (cons 'file "~/Projects/lisp/drogue/drogue.lisp"))
   #+END_SRC
   
** hippie-expand 
   as per http://blog.binchen.org/posts/autocomplete-with-a-dictionary-with-hippie-expand.html
   and 
   #+BEGIN_SRC emacs-lisp :results output silent
     (global-set-key (kbd "M-/") 'hippie-expand)

     ;; The actual expansion function
     (defun try-expand-by-dict (old)
       ;; old is true if we have already attempted an expansion
       (unless (bound-and-true-p ispell-minor-mode)
         (ispell-minor-mode 1))

       ;; english-words.txt is the fallback dicitonary
       (if (not ispell-alternate-dictionary)
           (setq ispell-alternate-dictionary (file-truename "~/.emacs.d/misc/english-words.txt")))
       (let ((lookup-func (if (fboundp 'ispell-lookup-words)
                            'ispell-lookup-words
                            'lookup-words)))
         (unless old
           (he-init-string (he-lisp-symbol-beg) (point))
           (if (not (he-string-member he-search-string he-tried-table))
             (setq he-tried-table (cons he-search-string he-tried-table)))
           (setq he-expand-list
                 (and (not (equal he-search-string ""))
                      (funcall lookup-func (concat (buffer-substring-no-properties (he-lisp-symbol-beg) (point)) "*")))))
         (if (null he-expand-list)
           (if old (he-reset-string))
           (he-substitute-string (car he-expand-list))
           (setq he-expand-list (cdr he-expand-list))
           t)
         ))

(defun try-expand-flexible-abbrev (old)
  "Try to complete word using flexible matching.

Flexible matching works by taking the search string and then
interspersing it with a regexp for any character. So, if you try
to do a flexible match for `foo' it will match the word
`findOtherOtter' but also `fixTheBoringOrange' and
`ifthisisboringstopreadingnow'.

The argument OLD has to be nil the first call of this function, and t
for subsequent calls (for further possible completions of the same
string).  It returns t if a new completion is found, nil otherwise."
  (if (not old)
      (progn
        (he-init-string (he-lisp-symbol-beg) (point))
        (if (not (he-string-member he-search-string he-tried-table))
            (setq he-tried-table (cons he-search-string he-tried-table)))
        (setq he-expand-list
              (and (not (equal he-search-string ""))
                   (he-flexible-abbrev-collect he-search-string)))))
  (while (and he-expand-list
              (he-string-member (car he-expand-list) he-tried-table))
    (setq he-expand-list (cdr he-expand-list)))
  (if (null he-expand-list)
      (progn
        (if old (he-reset-string))
        ())
      (progn
        (he-substitute-string (car he-expand-list))
        (setq he-expand-list (cdr he-expand-list))
        t)))

(defun he-flexible-abbrev-collect (str)
  "Find and collect all words that flex-matches STR.
See docstring for `try-expand-flexible-abbrev' for information
about what flexible matching means in this context."
  (let ((collection nil)
        (regexp (he-flexible-abbrev-create-regexp str)))
    (save-excursion
      (goto-char (point-min))
      (while (search-forward-regexp regexp nil t)
        ;; Is there a better or quicker way than using
        ;; `thing-at-point' here?
        (setq collection (cons (thing-at-point 'word) collection))))
    collection))

(defun he-flexible-abbrev-create-regexp (str)
  "Generate regexp for flexible matching of STR.
See docstring for `try-expand-flexible-abbrev' for information
about what flexible matching means in this context."
  (concat "\\b" (mapconcat (lambda (x) (concat "\\w*" (list x))) str "")
          "\\w*" "\\b"))

     (setq hippie-expand-try-functions-list
           '(try-complete-file-name-partially
             try-complete-file-name
             try-expand-all-abbrevs
             try-expand-list
             try-expand-line
             try-expand-dabbrev
             try-expand-dabbrev-all-buffers
             try-expand-dabbrev-from-kill
             try-complete-lisp-symbol-partially
             try-complete-lisp-symbol
             try-expand-by-dict
             ;;try-expand-flexible-abbrev
             yas-hippie-try-expand
))
   #+END_SRC
   
** text-mode stuff
   #+BEGIN_SRC emacs-lisp :results output silent

     ;(add-hook 'text-mode-hook 'flyspell-mode)
;    ;(add-hook 'text-mode-hook 'writeroom-mode)
     ;(add-hook 'text-mode-hook #'(lambda()(linum-mode 0)))
   #+END_SRC
   
   
** recentf
   #+BEGIN_SRC emacs-lisp :results output silent
 (recentf-mode 1)
     ;(run-at-time nil (* 5 60) 'recentf-save-list)
   #+END_SRC
   
   
** more sanity
   #+BEGIN_SRC emacs-lisp :results output silent
 (setq delete-old-versions t )		; delete excess backup versions silently
 (setq version-control t )		; use version control
 (setq vc-make-backup-files t )		; make backups file even when in version controlled dir
 (setq backup-directory-alist `(("." . "~/.emacs.d/backups")) ) ; which directory to put backups file
 (setq vc-follow-symlinks t )				       ; don't ask for confirmation when opening symlinked file
 (setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)) ) ;transform backups file name
 (setq inhibit-startup-screen t )	; inhibit useless and old-school startup screen
 (setq ring-bell-function 'ignore )	; silent bell when you make a mistake
 (setq coding-system-for-read 'utf-8 )	; use utf-8 by default
 (setq coding-system-for-write 'utf-8 )
 (setq sentence-end-double-space nil)	; sentence SHOULD end with only a point.
 (setq default-fill-column 80)		; toggle wrapping text at the 80th character
 (setq initial-scratch-message ";;;;happy hacking") ; print a default message in the empty scratch buffer opened at startup

   #+END_SRC
   
** persist kill ring

   #+BEGIN_SRC emacs-lisp :results output silent
     (savehist-mode 1)
     (setq savehist-additional-variables 
     '(kill-ring search-ring regexp-search-ring))
     (setq savehist-file "~/.emacs.d/tmp/savehist")
   #+END_SRC

** browse with eww
   #+BEGIN_SRC emacs-lisp :results output silent
   (setq browse-url-browser-function 'eww-browse-url)
   #+END_SRC
** disasbled functions
   #+BEGIN_SRC emacs-lisp :results output silent
(defun not-anymore ()
"For overwriting wrong keybindings"
  (interactive)
  (message "not anymore")
)


;(global-set-key (kbd "C-x C-c") 'not-anymore)
(global-set-key (kbd "C-h h") 'not-anymore)
(global-set-key (kbd "C-h C-a") 'not-anymore)
   #+END_SRC
* functionaria 
  #+BEGIN_SRC emacs-lisp :results output silent
          (require 'cl)

      (defun copy-filename-to-clip ()
    "Put the current file name on the clipboard"
        (interactive)
        (let ((filename (if (equal major-mode 'dired-mode)
                            default-directory
                          (buffer-file-name))))
          (when filename
            (with-temp-buffer
              (insert filename)
              (clipboard-kill-region (point-min) (point-max)))
            (message filename))))

          (defun load-init-file ()
            (interactive)
            (load-file (concat "~/.emacs.d/init.el")))

          (defun add-hook-to-modes (modes hook)
            (dolist (mode modes)
              (add-hook (intern (concat (symbol-name mode) "-mode-hook"))
                        hook)))

          (defun halt ()
            (interactive)
            (save-some-buffers)
            (kill-emacs))

          (defun my-whitespace-mode-hook ()
            (setq whitespace-action '(auto-cleanup)
                  whitespace-style  '(face tabs trailing lines-tail empty)
                  ;; use fill-column value instead
                  whitespace-line-column nil)
            (whitespace-mode))

          (defun my-makefile-mode-hook ()
            (setq indent-tabs-mode t
                  tab-width 4))

          (defun make-region-read-only (start end)
            (interactive "*r")
            (let ((inhibit-read-only t))
              (put-text-property start end 'read-only t)))

          (defun make-region-read-write (start end)
            (interactive "*r")
            (let ((inhibit-read-only t))
              (put-text-property start end 'read-only nil)))

  #+END_SRC
  
  
** clipboard-to-elfeed
   #+BEGIN_SRC emacs-lisp :results output silent
  (defun my-clipboard-to-elfeed ()
    (interactive)
    (let ((link (pbpaste)))
      (elfeed-add-feed link)))
   #+END_SRC
   
* osx specific 
  handle meta as command
  toggle fullscreen
  #+BEGIN_SRC emacs-lisp :results output silent
    (when (eq system-type 'darwin)
        (setq mac-command-modifier 'meta)
        (setq mac-option-modifier 'super)
        (setq mac-control-modifier 'control)
        (setq mac-function-modifier 'hyper)
    (setq mac-pass-command-to-system nil) 
        (defun toggle-fullscreen ()
          "Toggle full screen"
          (interactive)
          (set-frame-parameter
           nil 'fullscreen
           (when (not (frame-parameter nil 'fullscreen)) 'fullboth)))
        (defun pbcopy ()
          (interactive)
          (call-process-region (point) (mark) "pbcopy")
          (setq deactivate-mark t))

        (defun pbpaste ()
          (interactive)
          (call-process-region (point) (if mark-active (mark) (point)) "pbpaste" t t))

        (defun pbcut ()
          (interactive)
          (pbcopy)
          (delete-region (region-beginning) (region-end)))

        (global-set-key (kbd "H-c") 'pbcopy)
        (global-set-key (kbd "H-v") 'pbpaste)
        (global-set-key (kbd "H-x") 'pbcut)

        ;;recomended by brew
        (let ((default-directory "/usr/local/share/emacs/site-lisp/"))
          (normal-top-level-add-subdirs-to-load-path))

      )

  #+END_SRC
  
* email stuff
  #+BEGIN_SRC emacs-lisp :results output silent
    ;; (add-to-list 'load-path  "~/Projects/elisp/mu4e-multi/" )
    ;;       (require 'mu4e-multi)
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :results output silent
        (let ((mu-bin (if (eq system-type 'darwin)
                          "/usr/local/bin/mu"
                        "/usr/bin/mu"))
              (mu-load-path (if (eq system-type 'darwin)
                                "/usr/local/share/emacs/site-lisp/mu/mu4e/"
                              "/usr/share/emacs/site-lisp/mu4e/") ))
          (use-package mu4e  
            :load-path mu-load-path
            :commands (make-mu4e-context)
            :init (progn
                    (setq
                     mu4e-mu-binary mu-bin 
                     mu4e-maildir (expand-file-name "~/.mail/")
                     mu4e-context-policy 'pick-first
                     mu4e-reply-to-address  "mohsenil85@gmail.com"
                     user-mail-address  "mohsenil85@gmail.com"  
                     user-full-name    "Logan Mohseni" 
                     mu4e-drafts-folder  "/gmail/[Gmail]/.Drafts"
                     mu4e-sent-folder  "/gmail/[Gmail]/.Sent Mail"
                     mu4e-trash-folder  "/gmail/[Gmail]/.Trash"
                     mu4e-maildir-shortcuts '( ("/gmail/Inbox" . ?i)
                                               ("/gmail/[Gmail]/.Sent Mail" . ?s)
                                               ("/gmail/[Gmail]/.Trash" . ?t)
                                               ("/gmail/[Gmail]/.All Mail" . ?a)
                                               ("/gmail/[Gmail]/.Drafts" . ?d)) 
                     
                     user-mail-address "mohsenil85@gmail.com"
                     send-mail-function 'message-send-mail-with-sendmail
                     message-send-mail-function 'message-send-mail-with-sendmail
                     sendmail-program "/usr/local/bin/msmtp"
                     mu4e-get-mail-command "mbsync -a "
                     mu4e-html2text-command "w3m -T text/html"
                     mu4e-update-interval 120
                     mu4e-headers-auto-update t
                     mu4e-compose-signature-auto-include nil
                     message-kill-buffer-on-exit t
                     mu4e-sent-messages-behavior 'delete
                     mu4e-show-images t
                     mu4e-confirm-quit t
                     mu4e-headers-skip-duplicates t)
                    (when (fboundp 'imagemagick-register-types)
                      (imagemagick-register-types)))
            :config
            (progn
              (require 'mu4e-contrib)
              (setq mu4e-contexts
                    `( 
                      ,(make-mu4e-context
                        :name "private"
                        :enter-func (lambda ()
                                      (mu4e-message "Entering Private context"))
                        :leave-func (lambda ()
                                      (mu4e-message "Leaving Private context"))
                        ;; we match based on the contact-fields of the message
                        :match-func (lambda (msg)
                                      (when msg 
                                        (mu4e-message-contact-field-matches 
                                         msg 
                                         :to "mohsenil85@gmail.com")))
                        :vars '( 
                                (mu4e-reply-to-address . "mohsenil85@gmail.com")
                                (user-mail-address . "mohsenil85@gmail.com"  )
                                (user-full-name   . "Logan Mohseni" )
                                (mu4e-drafts-folder . "/gmail/[Gmail]/.Drafts")
                                (mu4e-sent-folder . "/gmail/[Gmail]/.Sent Mail/")
                                (mu4e-trash-folder . "/gmail/[Gmail]/.Trash")
                                (mu4e-compose-signature . nil)
                                (mu4e-maildir-shortcuts . ( ("/gmail/Inbox" . ?i)
                                                            ("/gmail/[Gmail]/.Sent Mail" . ?s)
                                                            ("/gmail/[Gmail]/.Trash" . ?t)
                                                            ("/gmail/[Gmail]/.All Mail" . ?a)
                                                            ("/gmail/[Gmail]/.Drafts" . ?d)))
                                ))
                      ,(make-mu4e-context
                        :name "work"
                        :enter-func (lambda ()
                                      (mu4e-message "Entering Work context"))
                        :leave-func (lambda ()
                                      (mu4e-message "Leaving Work context"))
                        ;; we match based on the contact-fields of the message
                        :match-func (lambda (msg)
                                      (when msg 
                                        (mu4e-message-contact-field-matches 
                                         msg 
                                         :to "logan.mohseni@singlemindconsulting.com")))
                        :vars '( 
                                (mu4e-reply-to-address . "logan.mohseni@singlemindconsulting.com")
                                (user-mail-address . "logan.mohseni@singlemindconsulting.com"  )
                                (user-full-name   . "Logan Mohseni")
                                (mu4e-drafts-folder . "/work/[Gmail]/.Drafts")
                                (mu4e-sent-folder . "/work/[Gmail]/.Sent Mail")
                                (mu4e-trash-folder . "/work/[Gmail]/.Trash")
                                (mu4e-compose-signature .
 "<#part type=text/html> <!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"> <html> <head> <meta http-equiv=\"Content-Type\" content=\"text/html\; charset=utf-8\"> <meta http-equiv=\"Content-Style-Type\" content=\"text/css\"> <title></title> <meta name=\"Generator\" content=\"Cocoa HTML Writer\"> <meta name=\"CocoaVersion\" content=\"1504.81\"> <style type=\"text/css\"> p.p1 {margin: 0.0px 0.0px 0.0px 0.0px\; line-height: 14.0px\; font: 12.0px Arial\; color: #38678f\; -webkit-text-stroke: #38678f} p.p2 {margin: 0.0px 0.0px 0.0px 0.0px\; line-height: 15.0px\; font: 12.0px Arial\; color: #666666\; -webkit-text-stroke: #666666} span.s1 {font-kerning: none} span.s2 {font: 13.0px 'Trebuchet MS'\; font-kerning: none} span.s3 {font: 13.0px 'Trebuchet MS'\; font-kerning: none\; color: #ff931e\; -webkit-text-stroke: 0px #ff931e} span.s4 {font-kerning: none\; color: #000000\; -webkit-text-stroke: 0px #000000} span.s5 {font-kerning: none\; color: #666666\; -webkit-text-stroke: 0px #666666} </style> </head> <body> <p class=\"p1\"><span class=\"s1\">Logan Mohseni | <i>Software Developer</i></span></p> <p class=\"p2\"><span class=\"s2\"><b>single</b></span><span class=\"s3\"><b>mind |</b></span><span class=\"s4\"> </span><span class=\"s1\"><b><i>research • design • build • support</i></b></span></p> <p class=\"p1\"><span class=\"s1\">2100 NW 22nd Ave | Suite A | Portland | Oregon | 97210</span></p> <p class=\"p1\"><span class=\"s5\"><b>Tel</b></span><span class=\"s1\">: 503.342.8270 | </span><span class=\"s5\"><b>Mobile</b></span><span class=\"s1\">: 307.751.4050</span></p> <p class=\"p1\"><span class=\"s5\"><b>@</b></span><span class=\"s1\">: <a href=\"mailto:logan.mohseni@singlemindconsulting.com\">logan.mohseni@singlemindconsulting.com</a></span><span class=\"s4\"><span class=\"Apple-converted-space\"> </span></span></p> </body> </html> <#/part>" 
                                                        )

                                
                                (mu4e-maildir-shortcuts .
                                                        ( ("/work/Inbox"        . ?i)
                                                          ("/work/[Gmail]/.Sent Mail"  . ?s)
                                                          ("/work/[Gmail]/.Trash"        . ?t)
                                                          ("/work/[Gmail]/.All Mail"        . ?a)
                                                          ("/work/[Gmail]/.Drafts"       . ?d))))))) 
              )
            :bind ("C-c m" . mu4e)
            ))

        (use-package evil-mu4e :ensure t  )

  #+END_SRC
  
  
* exwm
  #+BEGIN_SRC emacs-lisp :results output silent
;;    (when (eq system-name "treebeard")
;;     (use-package exwm
;;               :ensure t
;;               :config 
;;               (require 'exwm)
;;               (require 'exwm-config)
;;               (exwm-config-default)
;;               ))
  #+END_SRC
* diminish
  #+BEGIN_SRC emacs-lisp :results output silent
;(diminish 'wrap-region-mode)
;(diminish 'yas-minor-mode)
;(diminish 'auto-revert-mode )
;(diminish 'undo-tree-mode )
;(diminish 'git-gutter-mode )
;(diminish 'visual-line-mode )
;(diminish 'flyspell-mode )


  #+END_SRC
  
