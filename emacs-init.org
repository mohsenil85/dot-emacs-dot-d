#+TITLE: My Special Emacs Configuration
#+AUTHOR: logan mohseni
#+EMAIL: mohsenil85@gmail.com 
#+OPTIONS: toc:3 num:nil ^:nil

# [[https://github.com/mohsenil85/my-emacs-dot-d/blob/master/emacs-init.org][url]]

* packages
** package config 
*** Configure package archives

    #+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/"))

(add-to-list 'package-archives
             '("org" . "http://orgmode.org/elpa/"))

(package-initialize)
    #+END_SRC
    
    #+RESULTS:
    : t

*** Setup use-package
    #+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/vendor/use-package")
(require 'use-package)
    #+END_SRC
    
** Misc packages
   #+BEGIN_SRC emacs-lisp
          (use-package ag :ensure)
          ;;(use-package ggtags :ensure)
          (use-package better-defaults :ensure)
          (use-package markdown-mode :ensure)
;;;          (use-package auctex :ensure :config (require 'tex) )

   #+END_SRC

   #+RESULTS:
   : tex

** evil
*** evil-leader
    evil leader is required before evil
    #+BEGIN_SRC emacs-lisp
            (use-package evil-leader
            :ensure
            :config
            (progn
            (global-evil-leader-mode 1)
            (evil-leader/set-leader "<SPC>")
            (evil-leader/set-key "c" 'org-capture)
            (evil-leader/set-key "<SPC>" 'org-agenda-list)
            (evil-leader/set-key "o" (lambda ()
                                       ((interactive)
                                        (find-file "~/org/organizer.org")
                                        )))
      ))
    #+END_SRC

    #+RESULTS:
    : t

    
*** main evil
    #+BEGIN_SRC emacs-lisp
      (use-package evil
        :ensure
        :config
        (progn
          (setq evil-default-state 'emacs)
          (evil-mode 1))
        :bind
        ("S-SPC" . evil-exit-emacs-state)
        )
    #+END_SRC

    #+RESULTS:

    
*** evil-rsi
    #+BEGIN_SRC emacs-lisp
      (use-package evil-rsi :ensure :init (setq evil-rsi-mode 1) )  
    #+END_SRC
*** evil-org
    #+BEGIN_SRC emacs-lisp
      (use-package evil-org :ensure :init (require 'evil-org))  
    #+END_SRC
*** vimmish fold
    #+BEGIN_SRC emacs-lisp
      (use-package vimish-fold
        :ensure
        :config
        (progn
          (evil-leader/set-key "ff" 'vimish-fold)
          (evil-leader/set-key "fd" 'vimish-fold-delete)
          ))
    #+END_SRC
    
    
** helm
   taken from http://tuhdo.github.io/helm-intro.html
   things i need to remember
- C-h f, which runs describe-function
- C-h v, which runs describe-variable
- C-h w, which runs where-is
*** helm proper
    #+BEGIN_SRC emacs-lisp
      (use-package helm
        :ensure
        :demand
        :config
        (progn
          (require 'helm)
          (require 'helm-config)
          (setq helm-ff-transformer-show-only-basename nil)
          (setq helm-adaptive-history-file "~/.emacs/data/helm-history")

          (setq helm-M-x-fuzzy-match t)
          (setq helm-recentf-fuzzy-match t)
          (setq helm-mode-fuzzy-match t)
          (setq helm-buffers-fuzzy-matching t)
          (setq helm-ff-auto-update-initial-value t) ;; use c-backspact
          (setq helm-move-to-line-cycle-in-source t)

          
          (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
          (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
          (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
          (define-key shell-mode-map (kbd "C-c C-l") 'helm-comint-input-ring)
          (define-key minibuffer-local-map (kbd "C-c C-l") 'helm-minibuffer-history) 

          (autoload 'helm-descbinds      "helm-descbinds" t)
          (autoload 'helm-eshell-history "helm-eshell"    t)
          (autoload 'helm-esh-pcomplete  "helm-eshell"    t)

          (setq helm-autoresize-mode t)
          (setq helm-split-window-in-side-p t)
          (setq helm-ff-file-name-history-use-recentf t)
          (setq helm-autoresize-mode t)

          (helm-mode 1))
        :bind
        (("M-x" . helm-M-x)
         ("C-c h" . helm-command-prefix)
         ("C-x b" . helm-mini)
         ("C-h SPC" . helm-all-mark-rings)
         ("C-c h x" . helm-register)
         ("C-c h g" . helm-google-suggest)
         ("C-x C-b" . helm-buffers-list)
         ("C-x C-r" . helm-recentf)
         ("M-y" . helm-show-kill-ring)
         ("C-x C-f" . helm-find-files)
         ("C-c h o" . helm-occur)))

      (use-package helm-descbinds :ensure :config
        (progn
          (require 'helm-descbinds)
          (helm-descbinds-mode)
          )
        )

    #+END_SRC

*** helm-projectile
    #+BEGIN_SRC emacs-lisp
            (use-package projectile :ensure
              :config
              (progn
               (setq projectile-switch-project-action 'helm-projectile)))
            (use-package helm-projectile
              :ensure
              :config (progn
                        (projectile-global-mode)
                        (setq projectile-completion-system 'helm)
                        (helm-projectile-on)))
    #+END_SRC

    #+RESULTS:
    : t



*** helm-swoop
#+BEGIN_SRC emacs-lisp
  (use-package helm-swoop 
    :ensure
    :config
    (progn
      (global-set-key (kbd "M-i") 'helm-swoop)
      (global-set-key (kbd "M-I") 'helm-swoop-back-to-last-point)
      (global-set-key (kbd "C-c M-i") 'helm-multi-swoop)
      (global-set-key (kbd "C-x M-i") 'helm-multi-swoop-all)

      ;; When doing isearch, hand the word over to helm-swoop
      (define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
      ;; From helm-swoop to helm-multi-swoop-all
      (define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
      ;; When doing evil-search, hand the word over to helm-swoop
      ;; (define-key evil-motion-state-map (kbd "M-i") 'helm-swoop-from-evil-search)

      ;; Instead of helm-multi-swoop-all, you can also use helm-multi-swoop-current-mode
      (define-key helm-swoop-map (kbd "M-m") 'helm-multi-swoop-current-mode-from-helm-swoop)

      ;; Move up and down like isearch
      (define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
      (define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
      (define-key helm-multi-swoop-map (kbd "C-r") 'helm-previous-line)
      (define-key helm-multi-swoop-map (kbd "C-s") 'helm-next-line)

      ;; Save buffer when helm-multi-swoop-edit complete
      (setq helm-multi-swoop-edit-save t)

      ;; If this value is t, split window inside the current window
      (setq helm-swoop-split-with-multiple-windows nil)

      ;; Split direcion. 'split-window-vertically or 'split-window-horizontally
      (setq helm-swoop-split-direction 'split-window-vertically)

      ;; If nil, you can slightly boost invoke speed in exchange for text color
      (setq helm-swoop-speed-or-color nil)

      ;; ;; Go to the opposite side of line from the end or beginning of line
      (setq helm-swoop-move-to-line-cycle t)

      ;; Optional face for line numbers
      ;; Face name is `helm-swoop-line-number-face`
      (setq helm-swoop-use-line-number-face t)))
#+END_SRC
*** helm-ag
#+BEGIN_SRC emacs-lisp
(use-package :helm-ag :ensure)

#+END_SRC
*** helm-ack
    #+BEGIN_SRC emacs-lisp
      (use-package helm-ack
        :ensure)
          
    #+END_SRC
*** helm-gtags 
#+BEGIN_SRC emacs-lisp
  (use-package helm-gtags
    :ensure
    :config
    (progn
      ;;; Enable helm-gtags-mode
      (add-hook 'c-mode-hook 'helm-gtags-mode)
      (add-hook 'c++-mode-hook 'helm-gtags-mode)
      (add-hook 'asm-mode-hook 'helm-gtags-mode)
      (add-hook 'java-mode-hook 'helm-gtags-mode)

      ;; customize
      (setq
       (helm-gtags-path-style 'relative)
       (helm-gtags-ignore-case t)
       (helm-gtags-auto-update t))

    (setq helm-gtags-prefix-key "C-t")
    (helm-gtags-suggested-key-mapping t)
      ;; key bindings
      (eval-after-load "helm-gtags"
        '(progn
           (define-key helm-gtags-mode-map (kbd "M-t") 'helm-gtags-find-tag)
           (define-key helm-gtags-mode-map (kbd "M-r") 'helm-gtags-find-rtag)
           (define-key helm-gtags-mode-map (kbd "M-s") 'helm-gtags-find-symbol)
           (define-key helm-gtags-mode-map (kbd "M-g M-p") 'helm-gtags-parse-file)
           (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
           (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
           (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack))))

    
    )

#+END_SRC

#+RESULTS:
: t

** ac mode
   #+BEGIN_SRC emacs-lisp
          (use-package auto-complete
            :ensure
            :config
            (progn
              (require 'auto-complete-config)
              (add-to-list 'ac-dictionary-directories "~/.emacs.d/dict/")
              (ac-config-default)
              (ac-set-trigger-key "TAB")
              (ac-set-trigger-key "<tab>")
     ))
   #+END_SRC

   #+RESULTS:
   : t


** lisp
   #+BEGIN_SRC emacs-lisp
     (use-package paredit
       :ensure
       :config 
       (progn
         (add-hook 'emacs-lisp-mode-hook       'enable-paredit-mode)
         (add-hook 'eval-expression-minibuffer-setup-hook 'enable-paredit-mode)
         (add-hook 'lisp-mode-hook             'enable-paredit-mode)
         (add-hook 'slime-repl-mode-hook            'enable-paredit-mode)
         (add-hook 'lisp-interaction-mode-hook 'enable-paredit-mode)
         (add-hook 'scheme-mode-hook           'enable-paredit-mode)
         ))

     (use-package smartparens
       :ensure
       :init (require 'smartparens-config)
       :config (smartparens-global-strict-mode 1))

     (use-package evil-smartparens
       :ensure
       :config (progn
                 (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode)))

     (use-package rainbow-delimiters
       :ensure
       :config
       (progn
         (add-hook 'emacs-lisp-mode-hook #'rainbow-delimiters-mode)
         (add-hook 'lisp-mode-hook #'rainbow-delimiters-mode)
         (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)))


     (use-package slime
       :ensure
       :load-path  "~/.emacs.d/vendor/slime"
       :config (progn
                 (setq inferior-lisp-program "/usr/local/bin/sbcl")
                 (require 'slime-autoloads)
                 (add-to-list 'load-path "~/.emacs.d/vendor/slime/contrib")
                 (setq slime-contribs '(slime-fancy slime-fuzzy))
                 (slime-setup)
                 )
       )

     ;;     (use-package log4slime
     ;;       :load-path "~/.quicklisp/dists/quicklisp/software/log4cl-20141217-git/elisp/")
     (use-package fuzzy :ensure )
          (use-package ac-slime
       :ensure
       :config (progn
                 (add-hook 'slime-mode-hook 'set-up-slime-ac)
                 (add-hook 'slime-repl-mode-hook 'set-up-slime-ac)
                 (eval-after-load "auto-complete"
                   '(add-to-list 'ac-modes 'slime-repl-mode))))

   #+END_SRC

   #+RESULTS:
   : t

   
   
** javascript
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.json" . js-mode))
(autoload 'js2-mode "js2" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
  (use-package js2-mode :ensure :config (my-js-mode-stuff))
  (use-package ac-js2 :ensure)

  (defun my-js-mode-stuff ()
    (setq js2-highlight-level 3)
    (define-key js-mode-map "{" 'paredit-open-curly)
    (define-key js-mode-map "}" 'paredit-close-curly-and-newline)
    )

#+END_SRC

#+RESULTS:
: my-js-mode-stuff

** org-mode
   #+BEGIN_SRC emacs-lisp
     (use-package org 
       :ensure
       :config
       (progn
         (setq org-catch-invisible-edits t)

         (setq org-M-RET-may-split-line nil)
         (setq org-return-follows-link t)

         (setq org-hide-leading-stars t)
         (setq org-indent-mode t)
         ;;(setq org-log-done 'note)
         (setq org-log-into-drawer t)
         (setq org-show-hierarchy-above (quote ((default . t))))
         (setq org-show-siblings (quote ((default) (isearch) (bookmark-jump))))
         (setq org-default-notes-file "~/org/organizer.org")
         (setq  org-agenda-files (quote ("~/org")))
         (setq  org-agenda-ndays 7)
         (setq  org-deadline-warning-days 14)
         (setq  org-agenda-show-all-dates t)
         (setq  org-agenda-skip-deadline-if-done t)
         (setq  org-agenda-skip-scheduled-if-done t)
         (setq  org-agenda-start-on-weekday nil)
         (setq  org-reverse-note-order t)

         (setq org-todo-keywords
               (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                       (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))

         

         (setq org-todo-state-tags-triggers
               (quote (("CANCELLED" ("CANCELLED" . t))
                       ("WAITING" ("WAITING" . t))
                       ("HOLD" ("WAITING") ("HOLD" . t))
                       (done ("WAITING") ("HOLD"))
                       ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                       ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                       ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))



         ;;(setq org-agenda-start-with-follow-mode t)
         (setq org-use-tag-inheritance t)
         (setq org-capture-templates
               (quote (("t" "todo" entry (file+headline "~/org/organizer.org" "inbox")
                        "* TODO %?\n%U\n%a\n" )
                       ("n" "note" entry (file+headline "~/org/organizer.org" "inbox")
                        "* %? :NOTE:\n%U\n%a\n" )
                       ("h" "habit" entry (file+datetree "~/org/organizer.org")
                        "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
                       ("s" "shopping" checkitem
                        (file+headline "~/org/organizer.org" "shopping")
                        "- [ ] %?\n")

                       )))

         (setq org-agenda-custom-commands
           '(("O" "Office block agenda"
              ((agenda "" ((org-agenda-ndays 1))) 
                           ;; limits the agenda display to a single day
               (tags-todo "+PRIORITY=\"A\"")
               (tags-todo "computer|office|phone")
               (tags "project+CATEGORY=\"elephants\"")
               (tags "review" ((org-agenda-files '("~/org/organizer.org"))))
                               ;; limits the tag search to the file circuspeanuts.org
               (todo "WAITING"))
              ((org-agenda-compact-blocks t))) ;; options set here apply to the entire block
             ;; ...other commands here
             ))

         ;;TODO take this out


         ;; (setq org-capture-templates
         ;;       (quote (
         ;;               ("t" "todo" entry
         ;;                (file+headline "~/org/organizer.org" "inbox")
         ;;                "* TODO %?\n%U\n")
         ;;               ("n" "note" entry
         ;;                (file+headline "~/org/organizer.org" "inbox")
         ;;                "* %?\n%U\n%a\n")
         ;;               ("W" "work note" entry
         ;;                (file+headline "~/org/work.org" "work notes")
         ;;                "* %?\n%U\n%a\n:PROPERTIES:\n:TAGS:work \n:END:\n")
         ;;               ("w" "work todo" entry
         ;;                (file+headline "~/org/work.org" "tasks")
         ;;                "* TODO %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .>>\")\n")
         ;;               ("T" "Today" entry
         ;;                (file+headline "~/org/organizer.org" "inbox")
         ;;                "* TODO %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .>>\")\n")
         ;;               ("s" "shopping" checkitem
         ;;                (file+headline "~/org/organizer.org" "shopping")
         ;;                "- [ ] %?\n")
         ;;               ("j" "journal" entry (file+datetree "~/org/organizer.org")
         ;;                "* %?\n%U\n")
         ;;               ("d" "daily" entry (file+datetree "~/org/organizer.org")
         ;;                "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
         ;;               ("e" "weekly" entry (file+datetree "~/org/organizer.org")
         ;;                "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1w/5d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
         ;;               ("h" "habit" entry (file+datetree "~/org/organizer.org")
         ;;                "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
         ;;               )))

         ;;want to archive when done with a note

         ;; (defun my-hook ()
         ;;   (my-org-archive-done-tasks)
         ;;   (message "archived some shit")
         ;;   )

         ;; (setq org-after-todo-state-change-hook 'my-hook)


         ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
         (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                          (org-agenda-files :maxlevel . 9))))
         ;; Use full outline paths for refile targets - we file directly with IDO
         (setq org-refile-use-outline-path t)
         ;; Targets complete directly with IDO
                                             ;(setq org-outline-path-complete-in-steps nil)
         ;; Allow refile to create parent tasks with confirmation
         (setq org-refile-allow-creating-parent-nodes (quote confirm))

         

         (setq org-mobile-directory "~/Dropbox/org/"))
       :bind (
              ("C-c l" . org-store-link)
              ("C-c a" . org-agenda)
              ("C-c c" . org-capture)
              ))

     ;;put all DONE into archive
     (defun my-org-archive-done-tasks ()
       (interactive)
       (unless
           (org-map-entries 'org-archive-subtree "/DONE" 'file)))


     ;; (add-hook 'org-mode-hook
     ;;           (lambda ()
     ;;             (add-hook 'after-save-hook 'my-org-archive-done-tasks 'make-it-local)))

   #+END_SRC

   #+RESULTS:
   : my-org-archive-done-tasks

   #+BEGIN_SRC emacs-lisp
     (org-babel-do-load-languages
      'org-babel-load-languages
      '(
        (lisp . t)
        (sh . t)
        ))

   #+END_SRC

   #+RESULTS:

   
** yasnippet
    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
        :ensure
        :config
        (progn
          (require 'yasnippet)
          (yas-global-mode 1)))


      (use-package common-lisp-snippets
        :ensure
        :config (require 'common-lisp-snippets))
#+END_SRC

    #+RESULTS:
    : t

** elfeed
#+BEGIN_SRC emacs-lisp
  (use-package
    elfeed :ensure
    :config (evil-set-initial-state 'elfeed-show 'emacs)
    :bind ("C-x w" . elfeed)
    )
#+END_SRC
** powerline
#+BEGIN_SRC emacs-lisp
  (use-package powerline 
    :ensure
    :config (progn
              (require 'powerline)
              (powerline-center-evil-theme)))
#+END_SRC

#+RESULTS:
: t

** flycheck
#+begin_src emacs-lisp
  (use-package
    flycheck
    :ensure
    :config
    (progn
      (add-hook 'after-init-hook #'global-flycheck-mode)))
#+end_src

#+RESULTS:
: t

** better-defaults
#+BEGIN_SRC emacs-lisp
  (use-package better-defaults :ensure )
#+END_SRC

#+RESULTS:

** git-gutter-fringe
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter-fringe
    :ensure
    :config
    (progn
      (require 'git-gutter-fringe)
      (global-git-gutter-mode t)))

#+END_SRC

#+RESULTS:
: t

** magit
    #+BEGIN_SRC emacs-lisp
(use-package magit :ensure
:bind ("C-x g" . magit-status))
    #+END_SRC
    
** persistent scratch
    #+BEGIN_SRC emacs-lisp
(use-package persistent-scratch :ensure
:config (persistent-scratch-setup-default))
    #+END_SRC
    
** recursive narrow
   #+BEGIN_SRC emacs-lisp
     (use-package recursive-narrow :ensure
       :bind (("C-x n n" . recursive-narrow-or-widen-dwim)
              ("C-x n w" . recursive-widen-dwim)))
   #+END_SRC
** deft org
#+BEGIN_SRC emacs-lisp
  (use-package deft 
    :ensure
    :config (progn
              (setq
               deft-extension "org"
               deft-directory "~/org/"
               deft-text-mode 'org-mode)
              (global-set-key (kbd "H-d") 'deft)))
#+END_SRC
** org-ac
    #+BEGIN_SRC emacs-lisp
;;      (use-package org-ac
;;        :ensure
;;        :init
;;        (progn
;;          (require 'org-ac)
;;          ;; Make config suit for you. About the config item, eval the following sexp.
;;          ;; (customize-group "org-ac")
;;          (org-ac/config-default)
;;          ) )  
    #+END_SRC
    
** page-break-lines
#+begin_src emacs-lisp
  (use-package page-break-lines :ensure :config (global-page-break-lines-mode 1))

#+end_src

#+RESULTS:
: t
   
* emacs
** name
*** 
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Logan Mohseni")
    (setq user-mail-address "mohsenil85@gmail.com")
  #+END_SRC
  
** inital buffer
#+BEGIN_SRC emacs-lisp
  ;(setq initial-buffer-choice "~/org")
  (setq initial-buffer-choice "~/org/organizer.org")
;  (org-agenda-list)
;  (delete-other-windows)
;  (org-agenda-day-view)
#+END_SRC

#+RESULTS:

** inital frame size
   #+BEGIN_SRC emacs-lisp
     ;; (add-to-list 'initial-frame-alist '(height . 51 )) 
     ;; (add-to-list 'initial-frame-alist '(width . 177 )) 
     ;; (add-to-list 'initial-frame-alist '(top . 1 )) 
     ;; (add-to-list 'initial-frame-alist '(left . 1 )) 
   #+END_SRC

   #+RESULTS:

** tool bars, menu bars, and pop ups
   #+BEGIN_SRC emacs-lisp
(scroll-bar-mode -1)
(tool-bar-mode -1)
(menu-bar-mode -1)
   #+END_SRC
** cursor and startup screen
   #+BEGIN_SRC emacs-lisp
     (blink-cursor-mode -1)
     (setq inhibit-startup-screen t)
     (setq inhibit-startup-echo-area-message "USERNAME")
     (setq inhibit-startup-message t)
   #+END_SRC

   
** mark mode
   #+BEGIN_SRC emacs-lisp
     ;;;(transient-mark-mode t)
   #+END_SRC
** Asking questions
   #+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
(setq use-dialog-box nil)
   #+END_SRC

   #+RESULTS:

** silence bell
   #+BEGIN_SRC  emacs-lisp
(setq ring-bell-function nil)
   #+END_SRC
** narrow-to-region
   this is what i'm trying to learn.  
   C-x n p to narrow and
   C-x n w to widen to a page (delineated by ^L chars)
   #+BEGIN_SRC emacs-lisp
;(put 'narrow-to-page 'disabled nil)
   #+END_SRC 
** Mode line defaults
   #+BEGIN_SRC emacs-lisp
(line-number-mode t)
(column-number-mode t)
(size-indication-mode t)
   #+END_SRC
** line-wraping
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)

#+END_SRC

#+RESULTS:
: t

** line and paren highlighting
   #+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
  (setq show-paren-style 'parenthesis)
   #+END_SRC
** color theme
   #+BEGIN_SRC emacs-lisp
(use-package gandalf-theme :ensure)
;(use-package warm-night-theme :ensure)
;(use-package slime-theme :ensure)
;(use-package basic-theme :ensure)
;(use-package minimal-theme :ensure)
(load-theme 'gandalf)
   #+END_SRC

   #+RESULTS:
   : t

** utf-8 stuff
#+BEGIN_SRC emacs-lisp


 (setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8-unix)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)

#+END_SRC

#+RESULTS:

** bindings
   #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "M-o") 'other-window)
   (global-set-key (kbd "C-x C-k") 'kill-this-buffer)
   #+END_SRC

** prompts
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq confirm-nonexistent-file-or-buffer nil)

  (setq kill-buffer-query-functions
    (remq 'process-kill-buffer-query-function
           kill-buffer-query-functions))


#+END_SRC
** tool tips
#+BEGIN_SRC emacs-lisp
(tooltip-mode -1)
(setq tooltip-use-echo-area t)

#+END_SRC
** registers
   #+BEGIN_SRC emacs-lisp
(set-register ?e (cons 'file "~/.emacs.d/emacs-init.org"))
(set-register ?o (cons 'file "~/org/organizer.org"))
(set-register ?w (cons 'file "~/org/work.org"))
(set-register ?z (cons 'file "~/.zshrc"))
(set-register ?d (cons 'file "~/Projects/lisp/drogue/drogue.lisp"))
   #+END_SRC

   #+RESULTS:
   : (file . ~/Projects/lisp/drogue/drogue.lisp)

   

* functionaria 
  Helper functions to use either in an editing session or to help with
  configuration
  #+BEGIN_SRC emacs-lisp
    (require 'cl)

(defun my-put-file-name-on-clipboard ()
  "Put the current file name on the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))

    (defun load-init-file ()
      (interactive)
      (load-file "/Users/lmohseni/.emacs.d/init.el"))

    (defun add-hook-to-modes (modes hook)
      (dolist (mode modes)
        (add-hook (intern (concat (symbol-name mode) "-mode-hook"))
                  hook)))

    (defun halt ()
      (interactive)
      (save-some-buffers)
      (kill-emacs))

    (defun my-whitespace-mode-hook ()
      (setq whitespace-action '(auto-cleanup)
            whitespace-style  '(face tabs trailing lines-tail empty)
            ;; use fill-column value instead
            whitespace-line-column nil)
      (whitespace-mode))

    (defun my-makefile-mode-hook ()
      (setq indent-tabs-mode t
            tab-width 4))

    (defun make-region-read-only (start end)
      (interactive "*r")
      (let ((inhibit-read-only t))
        (put-text-property start end 'read-only t)))

    (defun make-region-read-write (start end)
      (interactive "*r")
      (let ((inhibit-read-only t))
        (put-text-property start end 'read-only nil)))

  #+END_SRC

  #+RESULTS:
  : make-region-read-write

  
* osx specific 
  handle meta as command
  toggle fullscreen
  #+BEGIN_SRC emacs-lisp
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'super)
    (setq mac-control-modifier 'control)
    (setq mac-function-modifier 'hyper)
    (use-package helm-itunes :ensure)
    (defun toggle-fullscreen ()
      "Toggle full screen"
      (interactive)
      (set-frame-parameter
       nil 'fullscreen
       (when (not (frame-parameter nil 'fullscreen)) 'fullboth)))
    (defun pbcopy ()
      (interactive)
      (call-process-region (point) (mark) "pbcopy")
      (setq deactivate-mark t))

    (defun pbpaste ()
      (interactive)
      (call-process-region (point) (if mark-active (mark) (point)) "pbpaste" t t))

    (defun pbcut ()
      (interactive)
      (pbcopy)
      (delete-region (region-beginning) (region-end)))

    (global-set-key (kbd "H-c") 'pbcopy)
    (global-set-key (kbd "H-v") 'pbpaste)
    (global-set-key (kbd "H-x") 'pbcut)
    (global-set-key (kbd "H-i") 'load-init-file)

    ;;recomended by brew
    (let ((default-directory "/usr/local/share/emacs/site-lisp/"))
      (normal-top-level-add-subdirs-to-load-path))

  #+END_SRC
  
* mu4e stuff
#+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/builds/mu/mu4e")
    (require 'smtpmail)

    (setq mu4e-mu-binary "/usr/local/bin/mu")
  (setq mail-user-agent 'mu4e-user-agent)


  (require 'org-mu4e)

    ; smtp
    (setq message-send-mail-function 'smtpmail-send-it
          smtpmail-starttls-credentials
          '(("imap.gmail.com" 587 nil nil))
          smtpmail-default-smtp-server "imap.gmail.com"
          smtpmail-smtp-server "imap.gmail.com"
          smtpmail-smtp-service 587
          smtpmail-debug-info t)

    (require 'mu4e)

    (setq mu4e-maildir (expand-file-name "~/.mail/gmail"))

    (setq mu4e-drafts-folder "/[GMail]/.Drafts")
    (setq mu4e-sent-folder   "/[GMail]/.Sent Items")
    (setq mu4e-trash-folder  "/[GMail]/.Trash")
    (setq message-signature-file "~/.emacs.d/.signature") ; put your signature in this file

    ; get mail
    (setq mu4e-get-mail-command "mbsync -a "
          mu4e-html2text-command "w3m -T text/html"
          mu4e-update-interval 120
          mu4e-headers-auto-update t
          mu4e-compose-signature-auto-include nil)

    (setq mu4e-maildir-shortcuts
          '( ("Inbox"        . ?i)
             ("Sent Items"   . ?s)
             ("Trash"        . ?t)
             ("Drafts"       . ?d)))

    ;; show images
    ;;;(setq mu4e-show-images t)

    ;; use imagemagick, if available
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))

    ;; general emacs mail settings; used when composing e-mail
    ;; the non-mu4e-* stuff is inherited from emacs/message-mode
    (setq mu4e-reply-to-address "mohsenil85@gmail.com"
        user-mail-address "mohsenil85@gmail.com"
        user-full-name  "Logan Mohseni")

    ;; don't save message to Sent Messages, IMAP takes care of this
    ; (setq mu4e-sent-messages-behavior 'delete)

    ;; spell check
    (add-hook 'mu4e-compose-mode-hook
            (defun my-do-compose-stuff ()
               "My settings for message composition."
               (set-fill-column 80)
               (flyspell-mode)))
   
  (global-set-key (kbd "C-c m") 'mu4e)
  (global-set-key (kbd "C-c e") 'elfeed)
#+END_SRC

#+RESULTS:
: mu4e
    
* diminish
must be at very end?
#+begin_src emacs-lisp
  (use-package
    diminish
    :ensure
    :config
    (progn
      (diminish 'helm-mode)
      (diminish 'evil-smartparens-mode)
      (diminish 'evil-rsi-mode)
      (diminish 'smartparens-mode)
      (diminish 'page-break-lines-mode)
      (diminish 'org-indent-mode)
      (diminish 'git-gutter-mode)
      (diminish 'evil-org-mode)
      (diminish 'flycheck-mode)
      (diminish 'yas-minor-mode)
      (diminish 'smartparens-mode)
      (diminish 'undo-tree-mode)
      (diminish 'paredit-mode)
      (diminish 'visual-line-mode)
      
      ))
#+end_src

#+RESULTS:
: t

